{"ast":null,"code":"import pieces from \"./pieces\";\nexport const calculateLegalMoves = function (board, color) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  console.log(color);\n  const pieces = board.map((piece, index) => piece & color ? index : null).filter(piece => piece !== null);\n  const moves = pieces.map(index => {\n    return calculateLegalMovesForPiece(board, index, depth);\n  }).reduce((acc, val) => acc.concat(val), []);\n  return moves;\n};\nconst calculateLegalMovesForPiece = (board, index, depth) => {\n  const type = Object.keys(pieces).find(key => pieces[key] === board[index]);\n  let legalMoves;\n  switch (type.toLowerCase()) {\n    case \"p\":\n      legalMoves = calculatePawnMoves(board, index);\n      break;\n    case \"r\":\n      legalMoves = calculateRookMoves(board, index);\n      break;\n    case \"n\":\n      legalMoves = calculateKnightMoves(board, index);\n      break;\n    case \"b\":\n      legalMoves = calculateBishopMoves(board, index);\n      break;\n    case \"q\":\n      legalMoves = calculateQueenMoves(board, index);\n      break;\n    case \"k\":\n      if (depth) return calculateCandidateKingMoves(board, index);else return calculateKingMoves(board, index);\n    default:\n      return [];\n  }\n  console.log(legalMoves, index);\n  // return [];\n\n  // return legalMoves;\n  return legalMoves.filter(move => !isKingAttacked(movePiece(board, index, move), move, board[index] & 16 ? 8 : 16));\n};\nfunction isOccupied(board, index) {\n  return board[index] !== 0;\n}\nfunction isSameColor(board, index1, index2) {\n  return board[index1] & board[index2] & 16 || board[index1] & board[index2] & 8;\n}\nfunction calculatePawnMoves(board, index) {\n  let rank = Math.floor(index / 8);\n  let file = index % 8;\n  const candidateMoves = [];\n  if (board[index] & 8) {\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\n    if (rank === 6 && !isOccupied(board, index - 16)) candidateMoves.push(index - 16);\n    if (file > 0 && isOccupied(board, index - 9)) candidateMoves.push(index - 9);\n    if (file < 7 && isOccupied(board, index - 7)) candidateMoves.push(index - 7);\n  } else {\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\n    if (rank === 1 && !isOccupied(board, index + 16)) candidateMoves.push(index + 16);\n    if (file > 0 && isOccupied(board, index + 7)) candidateMoves.push(index + 7);\n    if (file < 7 && isOccupied(board, index + 9)) candidateMoves.push(index + 9);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateRookMoves(board, index) {\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  for (let i = -1; i >= -file; i--) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = 1; i < 8 - file; i++) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = -1; i >= -rank; i--) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  for (let i = 1; i < 8 - rank; i++) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateBishopMoves(board, index) {\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\n    //up and left\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\n    //down and right\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\n    //up and right\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  for (let i = 1; i < 1 + Math.min(file, 8 - rank); i++) {\n    //down and left\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  console.log(legalMoves);\n  return legalMoves;\n}\nfunction calculateKnightMoves(board, index) {\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  if (file > 0) {\n    if (rank > 1) candidateMoves.push(index - 17);\n    if (rank < 6) candidateMoves.push(index + 15);\n  }\n  if (file > 1) {\n    if (rank > 0) candidateMoves.push(index - 10);\n    if (rank < 7) candidateMoves.push(index + 6);\n  }\n  if (file < 6) {\n    if (rank > 0) candidateMoves.push(index - 6);\n    if (rank < 7) candidateMoves.push(index + 10);\n  }\n  if (file < 7) {\n    if (rank > 1) candidateMoves.push(index - 15);\n    if (rank < 6) candidateMoves.push(index + 17);\n  }\n  let legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateQueenMoves(board, index) {\n  return [...calculateBishopMoves(board, index), ...calculateRookMoves(board, index)];\n}\nfunction calculateCandidateKingMoves(board, index) {\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  if (file > 0) {\n    candidateMoves.push(index - 1);\n    if (rank > 0) candidateMoves.push(index - 9);\n    if (rank < 7) candidateMoves.push(index + 7);\n  }\n  if (file < 7) {\n    candidateMoves.push(index + 1);\n    if (rank > 0) candidateMoves.push(index - 7);\n    if (rank < 7) candidateMoves.push(index + 9);\n  }\n  if (rank > 0) candidateMoves.push(index - 8);\n  if (rank < 7) candidateMoves.push(index + 8);\n  return candidateMoves.filter(move => !isSameColor(board, index, move));\n}\nexport function calculateKingMoves(board, index) {\n  const candidateMoves = calculateCandidateKingMoves(board, index);\n  const white = board[index] & 16;\n  const legalMoves = candidateMoves.filter(move => {\n    return !isKingAttacked(movePiece(board, index, move), move, white);\n  });\n  if (true && !isKingAttacked(board, index, white)) {\n    //if king and rook haven't moved yet.\n    if (white) {\n      if (legalMoves.includes(5) && !isKingAttacked(movePiece(board, index, 6), 6, white) && board[6] === 0) {\n        legalMoves.push(6);\n      }\n      if (legalMoves.includes(3) && board[2] === 0 && !isKingAttacked(movePiece(board, index, 2), 2, white) && board[1] === 0) {\n        legalMoves.push(2);\n      }\n    } else {\n      if (legalMoves.includes(61) && !isKingAttacked(movePiece(board, index, 62), 62, white) && board[62] === 0) {\n        legalMoves.push(62);\n      }\n      if (legalMoves.includes(59) && board[58] === 0 && !isKingAttacked(movePiece(board, index, 58), 58, white) && board[57] === 0) {\n        legalMoves.push(58);\n      }\n    }\n  }\n  return legalMoves;\n}\nexport default calculateLegalMovesForPiece;\nfunction movePiece(board, index, move) {\n  const newBoard = [...board];\n  newBoard[move] = newBoard[index];\n  newBoard[index] = 0;\n  return newBoard;\n}\nfunction isKingAttacked(board, index, color) {\n  console.log(\"checking if king attacked\");\n  const opponentColor = color & 16 ? 8 : 16;\n  console.log(color, \"opponent:\", opponentColor);\n  return false;\n  const opponentMoves = calculateLegalMoves(board, opponentColor, 1);\n  return opponentMoves.includes(index);\n}","map":{"version":3,"names":["pieces","calculateLegalMoves","board","color","depth","arguments","length","undefined","console","log","map","piece","index","filter","moves","calculateLegalMovesForPiece","reduce","acc","val","concat","type","Object","keys","find","key","legalMoves","toLowerCase","calculatePawnMoves","calculateRookMoves","calculateKnightMoves","calculateBishopMoves","calculateQueenMoves","calculateCandidateKingMoves","calculateKingMoves","move","isKingAttacked","movePiece","isOccupied","isSameColor","index1","index2","rank","Math","floor","file","candidateMoves","push","i","min","white","includes","newBoard","opponentColor","opponentMoves"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/src/calculateMoves.js"],"sourcesContent":["import pieces from \"./pieces\";\r\n\r\nexport const calculateLegalMoves = (board, color, depth = 0) => {\r\n  console.log(color);\r\n  const pieces = board\r\n    .map((piece, index) => (piece & color ? index : null))\r\n    .filter((piece) => piece !== null);\r\n  const moves = pieces\r\n    .map((index) => {\r\n      return calculateLegalMovesForPiece(board, index, depth);\r\n    })\r\n    .reduce((acc, val) => acc.concat(val), []);\r\n\r\n  return moves;\r\n};\r\n\r\nconst calculateLegalMovesForPiece = (board, index, depth) => {\r\n  const type = Object.keys(pieces).find((key) => pieces[key] === board[index]);\r\n  let legalMoves;\r\n  switch (type.toLowerCase()) {\r\n    case \"p\":\r\n      legalMoves = calculatePawnMoves(board, index);\r\n      break;\r\n    case \"r\":\r\n      legalMoves = calculateRookMoves(board, index);\r\n      break;\r\n    case \"n\":\r\n      legalMoves = calculateKnightMoves(board, index);\r\n      break;\r\n    case \"b\":\r\n      legalMoves = calculateBishopMoves(board, index);\r\n      break;\r\n    case \"q\":\r\n      legalMoves = calculateQueenMoves(board, index);\r\n      break;\r\n    case \"k\":\r\n      if (depth) return calculateCandidateKingMoves(board, index);\r\n      else return calculateKingMoves(board, index);\r\n    default:\r\n      return [];\r\n  }\r\n  console.log(legalMoves, index)\r\n  // return [];\r\n\r\n  // return legalMoves;\r\n  return legalMoves.filter(\r\n    (move) =>\r\n      !isKingAttacked(movePiece(board, index, move), move, board[index] & 16 ? 8 : 16)\r\n  );\r\n};\r\n\r\nfunction isOccupied(board, index) {\r\n  return board[index] !== 0;\r\n}\r\n\r\nfunction isSameColor(board, index1, index2) {\r\n  return (\r\n    board[index1] & board[index2] & 16 || board[index1] & board[index2] & 8\r\n  );\r\n}\r\n\r\nfunction calculatePawnMoves(board, index) {\r\n  let rank = Math.floor(index / 8);\r\n  let file = index % 8;\r\n  const candidateMoves = [];\r\n  if (board[index] & 8) {\r\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\r\n    if (rank === 6 && !isOccupied(board, index - 16))\r\n      candidateMoves.push(index - 16);\r\n    if (file > 0 && isOccupied(board, index - 9))\r\n      candidateMoves.push(index - 9);\r\n    if (file < 7 && isOccupied(board, index - 7))\r\n      candidateMoves.push(index - 7);\r\n  } else {\r\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\r\n    if (rank === 1 && !isOccupied(board, index + 16))\r\n      candidateMoves.push(index + 16);\r\n    if (file > 0 && isOccupied(board, index + 7))\r\n      candidateMoves.push(index + 7);\r\n    if (file < 7 && isOccupied(board, index + 9))\r\n      candidateMoves.push(index + 9);\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateRookMoves(board, index) {\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  for (let i = -1; i >= -file; i--) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = 1; i < 8 - file; i++) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = -1; i >= -rank; i--) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  for (let i = 1; i < 8 - rank; i++) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateBishopMoves(board, index) {\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\r\n    //up and left\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\r\n    //down and right\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\r\n    //up and right\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < 1 + Math.min(file, 8 - rank); i++) {\r\n    //down and left\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  console.log(legalMoves);\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateKnightMoves(board, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  if (file > 0) {\r\n    if (rank > 1) candidateMoves.push(index - 17);\r\n    if (rank < 6) candidateMoves.push(index + 15);\r\n  }\r\n  if (file > 1) {\r\n    if (rank > 0) candidateMoves.push(index - 10);\r\n    if (rank < 7) candidateMoves.push(index + 6);\r\n  }\r\n  if (file < 6) {\r\n    if (rank > 0) candidateMoves.push(index - 6);\r\n    if (rank < 7) candidateMoves.push(index + 10);\r\n  }\r\n  if (file < 7) {\r\n    if (rank > 1) candidateMoves.push(index - 15);\r\n    if (rank < 6) candidateMoves.push(index + 17);\r\n  }\r\n  let legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateQueenMoves(board, index) {\r\n  return [\r\n    ...calculateBishopMoves(board, index),\r\n    ...calculateRookMoves(board, index),\r\n  ];\r\n}\r\n\r\nfunction calculateCandidateKingMoves(board, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  if (file > 0) {\r\n    candidateMoves.push(index - 1);\r\n    if (rank > 0) candidateMoves.push(index - 9);\r\n    if (rank < 7) candidateMoves.push(index + 7);\r\n  }\r\n  if (file < 7) {\r\n    candidateMoves.push(index + 1);\r\n    if (rank > 0) candidateMoves.push(index - 7);\r\n    if (rank < 7) candidateMoves.push(index + 9);\r\n  }\r\n  if (rank > 0) candidateMoves.push(index - 8);\r\n  if (rank < 7) candidateMoves.push(index + 8);\r\n\r\n  return candidateMoves.filter((move) => !isSameColor(board, index, move));\r\n}\r\n\r\nexport function calculateKingMoves(board, index) {\r\n  const candidateMoves = calculateCandidateKingMoves(board, index);\r\n  const white = board[index] & 16;\r\n  const legalMoves = candidateMoves.filter((move) => {\r\n    return !isKingAttacked(movePiece(board, index, move), move, white);\r\n  });\r\n  if (true && !isKingAttacked(board, index, white)) {\r\n    //if king and rook haven't moved yet.\r\n    if (white) {\r\n      if (\r\n        legalMoves.includes(5) &&\r\n        !isKingAttacked(movePiece(board, index, 6), 6, white) &&\r\n        board[6] === 0\r\n      ) {\r\n        legalMoves.push(6);\r\n      }\r\n      if (\r\n        legalMoves.includes(3) &&\r\n        board[2] === 0 &&\r\n        !isKingAttacked(movePiece(board, index, 2), 2, white) &&\r\n        board[1] === 0\r\n      ) {\r\n        legalMoves.push(2);\r\n      }\r\n    } else {\r\n      if (\r\n        legalMoves.includes(61) &&\r\n        !isKingAttacked(movePiece(board, index, 62), 62, white) &&\r\n        board[62] === 0\r\n      ) {\r\n        legalMoves.push(62);\r\n      }\r\n      if (\r\n        legalMoves.includes(59) &&\r\n        board[58] === 0 &&\r\n        !isKingAttacked(movePiece(board, index, 58), 58, white) &&\r\n        board[57] === 0\r\n      ) {\r\n        legalMoves.push(58);\r\n      }\r\n    }\r\n  }\r\n  return legalMoves;\r\n}\r\n\r\nexport default calculateLegalMovesForPiece;\r\n\r\nfunction movePiece(board, index, move) {\r\n  const newBoard = [...board];\r\n  newBoard[move] = newBoard[index];\r\n  newBoard[index] = 0;\r\n  return newBoard;\r\n}\r\n\r\nfunction isKingAttacked(board, index, color) {\r\n  console.log(\"checking if king attacked\");\r\n  \r\n\r\n  const opponentColor = color & 16 ? 8 : 16;\r\n  console.log(color, \"opponent:\", opponentColor)\r\n  return false;\r\n  const opponentMoves = calculateLegalMoves(board, opponentColor, 1);\r\n  return opponentMoves.includes(index);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}