{"ast":null,"code":"import calculateLegalMovesForPiece, { calculateLegalMoves, isKingAttacked } from \"./calculateMoves\";\nimport { pieceTypes, pieceValues } from \"./pieces\";\nconst isOccupied = (board, index) => board[index] !== 0;\nconst getPieceColor = piece => {\n  if (piece & pieceTypes.White) return pieceTypes.White;\n  if (piece & pieceTypes.Black) return pieceTypes.Black;else return 0;\n};\nconst getPieceType = piece => piece & 0b111;\nconst isSameColor = (piece1, piece2) => !(getPieceColor(piece1) !== getPieceColor(piece2));\nconst movePiece = (board, _ref) => {\n  let {\n    from,\n    to\n  } = _ref;\n  const newBoard = [...board];\n  newBoard[to] = newBoard[from];\n  newBoard[from] = 0;\n  if (getPieceType(newBoard[to]) === pieceTypes.King) {\n    if (to === from + 2) {\n      console.log(\"castle short\");\n      newBoard[from + 1] = newBoard[from + 3];\n      newBoard[from + 3] = 0;\n    }\n    if (to === from - 2) {\n      console.log(\"castle long\");\n      newBoard[from - 1] = newBoard[from - 4];\n      newBoard[from - 4] = 0;\n    }\n  }\n  if (getPieceType(newBoard[to]) === pieceTypes.Pawn && (to < 8 || to > 55)) {\n    newBoard[to] = pieceTypes.Queen | getPieceColor(newBoard[to]);\n  }\n  return newBoard;\n};\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\n  const board = fen.board;\n  const type = getPieceType(board[from]);\n  const color = getPieceColor(board[from]);\n  const oppositeColor = color === pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\n  const isCheck = isKingAttacked({\n    ...fen,\n    board: movePiece(fen.board, {\n      from,\n      to\n    })\n  }, oppositeColor);\n  const isCapture = isOccupied(board, to);\n  const squares = \"abcdefgh\";\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\n  return `${pieces[type - 1].toUpperCase()}${isCapture && type === 1 ? squares[from % 8] : \"\"}${isCapture ? \"x\" : \"\"}${squares[to % 8]}${Math.floor(to / 8) + 1}${isCheck ? \"+\" : \"\"}`;\n};\nexport function parsePGN(pgn) {\n  const i = pgn.lastIndexOf(\"]\");\n  const header = pgn.slice(0, i + 1);\n  const movesString = pgn.slice(i + 1);\n  const regex = /\\d+\\.\\s|\\s/g;\n  const movesList = movesString.split(regex).filter(move => move !== \"\");\n  return movesList;\n}\nconst algebraicChessNotationToMove = (fen, notation) => {\n  if (notation === \"O-O\") return {\n    from: fen.turn === \"b\" ? 4 : 60,\n    to: fen.turn === \"b\" ? 6 : 62\n  };\n  if (notation === \"O-O-O\") return {\n    from: fen.turn === \"b\" ? 4 : 60,\n    to: fen.turn === \"b\" ? 2 : 58\n  };\n  const turnColor = fen.turn === \"b\" ? pieceTypes.White : pieceTypes.Black;\n  const regex = /^([NBRQK]?)([a-h]?)([1-8]?)(x?)([a-h][1-8])(=[NBRQK]?)?(\\+|#)?$/;\n  const matches = notation.match(regex);\n  const [, typeChar, file, rank, capture, to, promotion] = matches;\n  const index = to.charCodeAt(0) - 97 + (parseInt(to[1]) - 1) * 8;\n  const typeValue = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"].indexOf(typeChar);\n  const from = fen.board.map((value, i) => {\n    const type = getPieceType(value);\n    const color = getPieceColor(value);\n    if (type === typeValue && color === turnColor) return calculateLegalMovesForPiece(fen, i).includes(index);\n    return null;\n  }).filter(index => index !== null);\n  console.log(from);\n  return {\n    from,\n    to: index\n  };\n};\nfunction checkGameOver(fen) {\n  if (fen.fullMoveNumber === 0) return false;\n  const board = fen.board;\n  const turn = fen.turn;\n  const color = turn === \"w\" ? 0b1000 : 0b10000;\n  const king = color | pieceTypes.King;\n  const kingIndex = board.indexOf(king);\n  const legalKingMoves = calculateLegalMovesForPiece(fen, kingIndex);\n  // console.log(legalMoves, isKingAttacked(fen, kingIndex));\n  return legalKingMoves.length === 0 && isKingAttacked(fen, color) && calculateLegalMoves(fen, color).length === 0;\n}\nfunction fenToString(fen) {\n  let file = 0;\n  const boardString = fen.board.map((piece, index) => {\n    if (piece === 0) return \"\";\n    const type = piece & 0b111;\n    const color = piece & 0b1000;\n    const pieceString = [\"P\", \"N\", \"B\", \"R\", \"Q\", \"K\"][type - 1];\n    if (color === 0b1000) return pieceString.toLowerCase();\n    return pieceString;\n  });\n  return boardString.join(\"\");\n}\n\n// export function evaluatePosition(fen) {\n//   const { board } = fen;\n//   let score = 0;\n//   board.forEach((piece, index) => {\n//     if (piece === 0) return;\n//     const color = getPieceColor(board, index);\n//     const pieceType = getPieceType(piece);\n//     if (color === pieceTypes.White) {\n//       score += pieceValues[pieceType];\n//     } else {\n//       score -= pieceValues[pieceType];\n//     }\n//   });\n//   return score;\n// }\n\nexport { isOccupied, getPieceColor, getPieceType, isSameColor, movePiece, moveToAlgebraicChessNotation, algebraicChessNotationToMove, checkGameOver, fenToString };","map":{"version":3,"names":["calculateLegalMovesForPiece","calculateLegalMoves","isKingAttacked","pieceTypes","pieceValues","isOccupied","board","index","getPieceColor","piece","White","Black","getPieceType","isSameColor","piece1","piece2","movePiece","_ref","from","to","newBoard","King","console","log","Pawn","Queen","moveToAlgebraicChessNotation","fen","type","color","oppositeColor","isCheck","isCapture","squares","pieces","toUpperCase","Math","floor","parsePGN","pgn","i","lastIndexOf","header","slice","movesString","regex","movesList","split","filter","move","algebraicChessNotationToMove","notation","turn","turnColor","matches","match","typeChar","file","rank","capture","promotion","charCodeAt","parseInt","typeValue","indexOf","map","value","includes","checkGameOver","fullMoveNumber","king","kingIndex","legalKingMoves","length","fenToString","boardString","pieceString","toLowerCase","join"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/frontend/src/utils.js"],"sourcesContent":["import calculateLegalMovesForPiece, {\r\n  calculateLegalMoves,\r\n  isKingAttacked,\r\n} from \"./calculateMoves\";\r\nimport { pieceTypes, pieceValues } from \"./pieces\";\r\n\r\nconst isOccupied = (board, index) => board[index] !== 0;\r\n\r\nconst getPieceColor = (piece) => {\r\n  if (piece & pieceTypes.White) return pieceTypes.White;\r\n  if (piece & pieceTypes.Black) return pieceTypes.Black;\r\n  else return 0;\r\n};\r\n\r\nconst getPieceType = (piece) => piece & 0b111;\r\n\r\nconst isSameColor = (piece1, piece2) =>\r\n  !(getPieceColor(piece1) !== getPieceColor(piece2));\r\n\r\nconst movePiece = (board, { from, to }) => {\r\n  const newBoard = [...board];\r\n  newBoard[to] = newBoard[from];\r\n  newBoard[from] = 0;\r\n\r\n  if (getPieceType(newBoard[to]) === pieceTypes.King) {\r\n    if (to === from + 2) {\r\n      console.log(\"castle short\");\r\n      newBoard[from + 1] = newBoard[from + 3];\r\n      newBoard[from + 3] = 0;\r\n    }\r\n    if (to === from - 2) {\r\n      console.log(\"castle long\");\r\n      newBoard[from - 1] = newBoard[from - 4];\r\n      newBoard[from - 4] = 0;\r\n    }\r\n  }\r\n  if (getPieceType(newBoard[to]) === pieceTypes.Pawn && (to < 8 || to > 55)) {\r\n    newBoard[to] = pieceTypes.Queen | getPieceColor(newBoard[to]);\r\n  }\r\n\r\n  return newBoard;\r\n};\r\n\r\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\r\n  const board = fen.board;\r\n  const type = getPieceType(board[from]);\r\n  const color = getPieceColor(board[from]);\r\n  const oppositeColor =\r\n    color === pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\r\n  const isCheck = isKingAttacked(\r\n    { ...fen, board: movePiece(fen.board, { from, to }) },\r\n    oppositeColor\r\n  );\r\n  const isCapture = isOccupied(board, to);\r\n  const squares = \"abcdefgh\";\r\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\r\n\r\n  return `${pieces[type - 1].toUpperCase()}${\r\n    isCapture && type === 1 ? squares[from % 8] : \"\"\r\n  }${isCapture ? \"x\" : \"\"}${squares[to % 8]}${Math.floor(to / 8) + 1}${\r\n    isCheck ? \"+\" : \"\"\r\n  }`;\r\n};\r\n\r\nexport function parsePGN(pgn) {\r\n  const i = pgn.lastIndexOf(\"]\");\r\n  const header = pgn.slice(0, i + 1);\r\n  const movesString = pgn.slice(i + 1);\r\n\r\n  const regex = /\\d+\\.\\s|\\s/g;\r\n  const movesList = movesString.split(regex).filter((move) => move !== \"\");\r\n  return movesList;\r\n}\r\n\r\nconst algebraicChessNotationToMove = (fen, notation) => {\r\n  if (notation === \"O-O\")\r\n    return {\r\n      from: fen.turn === \"b\" ? 4 : 60,\r\n      to: fen.turn === \"b\" ? 6 : 62,\r\n    };\r\n  if (notation === \"O-O-O\")\r\n    return {\r\n      from: fen.turn === \"b\" ? 4 : 60,\r\n      to: fen.turn === \"b\" ? 2 : 58,\r\n    };\r\n\r\n  const turnColor = fen.turn === \"b\" ? pieceTypes.White : pieceTypes.Black;\r\n  const regex =\r\n    /^([NBRQK]?)([a-h]?)([1-8]?)(x?)([a-h][1-8])(=[NBRQK]?)?(\\+|#)?$/;\r\n  const matches = notation.match(regex);\r\n  const [, typeChar, file, rank, capture, to, promotion] = matches;\r\n\r\n  const index = to.charCodeAt(0) - 97 + (parseInt(to[1]) - 1) * 8;\r\n  const typeValue = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"].indexOf(typeChar);\r\n  const from = fen.board\r\n    .map((value, i) => {\r\n      const type = getPieceType(value);\r\n      const color = getPieceColor(value);\r\n      if (type === typeValue && color === turnColor)\r\n        return calculateLegalMovesForPiece(fen, i).includes(index);\r\n\r\n      return null;\r\n    })\r\n    .filter((index) => index !== null);\r\n    console.log(from);\r\n  return {\r\n    from,\r\n    to: index,\r\n  };\r\n};\r\n\r\nfunction checkGameOver(fen) {\r\n  if (fen.fullMoveNumber === 0) return false;\r\n  const board = fen.board;\r\n  const turn = fen.turn;\r\n  const color = turn === \"w\" ? 0b1000 : 0b10000;\r\n  const king = color | pieceTypes.King;\r\n  const kingIndex = board.indexOf(king);\r\n  const legalKingMoves = calculateLegalMovesForPiece(fen, kingIndex);\r\n  // console.log(legalMoves, isKingAttacked(fen, kingIndex));\r\n  return (\r\n    legalKingMoves.length === 0 &&\r\n    isKingAttacked(fen, color) &&\r\n    calculateLegalMoves(fen, color).length === 0\r\n  );\r\n}\r\n\r\nfunction fenToString(fen) {\r\n  let file = 0;\r\n  const boardString = fen.board.map((piece, index) => {\r\n    if (piece === 0) return \"\";\r\n    const type = piece & 0b111;\r\n    const color = piece & 0b1000;\r\n    const pieceString = [\"P\", \"N\", \"B\", \"R\", \"Q\", \"K\"][type - 1];\r\n    if (color === 0b1000) return pieceString.toLowerCase();\r\n    return pieceString;\r\n  });\r\n  return boardString.join(\"\");\r\n}\r\n\r\n// export function evaluatePosition(fen) {\r\n//   const { board } = fen;\r\n//   let score = 0;\r\n//   board.forEach((piece, index) => {\r\n//     if (piece === 0) return;\r\n//     const color = getPieceColor(board, index);\r\n//     const pieceType = getPieceType(piece);\r\n//     if (color === pieceTypes.White) {\r\n//       score += pieceValues[pieceType];\r\n//     } else {\r\n//       score -= pieceValues[pieceType];\r\n//     }\r\n//   });\r\n//   return score;\r\n// }\r\n\r\nexport {\r\n  isOccupied,\r\n  getPieceColor,\r\n  getPieceType,\r\n  isSameColor,\r\n  movePiece,\r\n  moveToAlgebraicChessNotation,\r\n  algebraicChessNotationToMove,\r\n  checkGameOver,\r\n  fenToString,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}