{"ast":null,"code":"import { isKingAttacked } from \"./calculateMoves\";\nimport { pieceTypes } from \"./pieces\";\nconst isOccupied = (board, index) => board[index] !== 0;\nconst getColor = (board, index) => {\n  if (board[index] & pieceTypes.White) return pieceTypes.White;\n  if (board[index] & pieceTypes.Black) return pieceTypes.Black;else return 0;\n};\nconst getType = (board, index) => board[index] & 0b111;\nconst isSameColor = (board, from, to) => !(getColor(board, from) !== getColor(board, to));\nconst movePiece = (board, _ref) => {\n  let {\n    from,\n    to\n  } = _ref;\n  const newBoard = [...board];\n  newBoard[to] = newBoard[from];\n  newBoard[from] = 0;\n  return newBoard;\n};\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\n  const board = fen.board;\n  const type = getType(board, from);\n  const color = getColor(board, from);\n  const oppositeColor = color === pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\n  const isCheck = isKingAttacked(fen, oppositeColor);\n  const isCapture = isOccupied(board, to);\n  const squares = \"abcdefgh\";\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\n  return `${pieces[type - 1].toUpperCase()}${isCapture && type == 1 ? squares[to % 8] : \"\"}${isCapture ? \"x\" : \"\"}${squares[to % 8]}${Math.floor(to / 8) + 1}${isCheck ? \"+\" : \"\"}`;\n};\nconst algebraidChessNotationToMove = (fen, notation) => {\n  if (notation === \"O-O\") return {\n    from: fen.turn === pieceTypes.White ? 4 : 60,\n    to: fen.turn === pieceTypes.White ? 6 : 62\n  };\n  if (notation === \"O-O-O\") return {\n    from: fen.turn === pieceTypes.White ? 4 : 60,\n    to: fen.turn === pieceTypes.White ? 2 : 58\n  };\n\n  //regex in short algebraic chess notation\n  const regex = /^([NBRQK]?)([a-h]?)([1-8]?)(x?)([a-h][1-8])(=[NBRQK]?)?(\\+|#)?$/;\n  const matches = notation.match(regex);\n  if (!matches) return null;\n  const [, type, file, rank, capture, to, promotion] = matches;\n  const candidatePieces = fen.board.map((piece, index) => {\n    if (getType(fen.board, index) === pieceTypes.Pawn && getColor(fen.board, index) === fen.turn) return index;\n    if (getType(fen.board, index) === pieceTypes[type] && getColor(fen.board, index) === fen.turn) return index;\n    return null;\n  }).filter(index => index !== null);\n  console.log(candidatePieces);\n  const color = fen.turn === \"w\" ? pieceTypes.White : pieceTypes.Black;\n};\nexport { isOccupied, getColor, getType, isSameColor, movePiece, moveToAlgebraicChessNotation, algebraidChessNotationToMove };","map":{"version":3,"names":["isKingAttacked","pieceTypes","isOccupied","board","index","getColor","White","Black","getType","isSameColor","from","to","movePiece","_ref","newBoard","moveToAlgebraicChessNotation","fen","type","color","oppositeColor","isCheck","isCapture","squares","pieces","toUpperCase","Math","floor","algebraidChessNotationToMove","notation","turn","regex","matches","match","file","rank","capture","promotion","candidatePieces","map","piece","Pawn","filter","console","log"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/src/utils.js"],"sourcesContent":["import { isKingAttacked } from \"./calculateMoves\";\r\nimport { pieceTypes } from \"./pieces\";\r\n\r\nconst isOccupied = (board, index) => board[index] !== 0;\r\n\r\nconst getColor = (board, index) => {\r\n  if (board[index] & pieceTypes.White) return pieceTypes.White;\r\n  if (board[index] & pieceTypes.Black) return pieceTypes.Black;\r\n  else return 0;\r\n};\r\n\r\nconst getType = (board, index) => board[index] & 0b111;\r\n\r\nconst isSameColor = (board, from, to) =>\r\n  !(getColor(board, from) !== getColor(board, to));\r\n\r\nconst movePiece = (board, {from, to}) => {\r\n  const newBoard = [...board];\r\n  newBoard[to] = newBoard[from];\r\n  newBoard[from] = 0;\r\n  return newBoard;\r\n};\r\n\r\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\r\n  const board = fen.board;\r\n  const type = getType(board, from);\r\n  const color = getColor(board, from);\r\n  const oppositeColor = color === pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\r\n  const isCheck = isKingAttacked(fen, oppositeColor);\r\n  const isCapture = isOccupied(board, to);\r\n  const squares = \"abcdefgh\";\r\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\r\n  return `${pieces[type - 1].toUpperCase()}${isCapture && type==1 ? squares[to%8] : \"\"}${isCapture ? \"x\" : \"\"}${\r\n    squares[to % 8]\r\n  }${Math.floor(to / 8)+ 1}${isCheck ? \"+\" : \"\"}`;\r\n};\r\n\r\nconst algebraidChessNotationToMove = (fen, notation) => {\r\n  if(notation === \"O-O\") return {from: fen.turn === pieceTypes.White ? 4 : 60, to: fen.turn === pieceTypes.White ? 6 : 62};\r\n  if(notation === \"O-O-O\") return {from: fen.turn === pieceTypes.White ? 4 : 60, to: fen.turn === pieceTypes.White ? 2 : 58};\r\n\r\n  //regex in short algebraic chess notation\r\n  const regex = /^([NBRQK]?)([a-h]?)([1-8]?)(x?)([a-h][1-8])(=[NBRQK]?)?(\\+|#)?$/;\r\n  const matches = notation.match(regex);\r\n  if(!matches) return null;\r\n  const [ ,type, file, rank, capture, to, promotion] = matches;\r\n\r\n  const candidatePieces = fen.board.map((piece, index) => {\r\n    if(getType(fen.board, index) === pieceTypes.Pawn && getColor(fen.board, index) === fen.turn) return index;\r\n    if(getType(fen.board, index) === pieceTypes[type] && getColor(fen.board, index) === fen.turn) return index;\r\n    return null;\r\n  }).filter(index => index !== null);\r\n  console.log(candidatePieces)\r\n\r\n\r\n  const color = fen.turn === \"w\" ? pieceTypes.White : pieceTypes.Black;\r\n};\r\n\r\nexport {\r\n  isOccupied,\r\n  getColor,\r\n  getType,\r\n  isSameColor,\r\n  movePiece,\r\n  moveToAlgebraicChessNotation,\r\n  algebraidChessNotationToMove,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}