{"ast":null,"code":"import pieces, { pieceTypes } from \"./pieces\";\nimport decodeFEN from \"./FENtoBoard\";\nexport const calculateLegalMoves = function (FEN_str, color) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const FEN = decodeFEN(FEN_str);\n  const pieces = FEN.board.map((piece, index) => piece & color ? index : null).filter(piece => piece !== null);\n  const moves = pieces.map(index => {\n    return calculateLegalMovesForPiece(FEN, index, depth);\n  }).reduce((acc, val) => acc.concat(val), []);\n  return moves;\n};\nconst calculateLegalMovesForPiece = (FEN_string, index, depth) => {\n  let legalMoves;\n  const FEN = decodeFEN(FEN_string);\n  const type = Object.keys(pieces).find(key => pieces[key] === FEN.board[index]);\n  switch (type.toLowerCase()) {\n    case \"p\":\n      legalMoves = calculatePawnMoves(FEN, index);\n      break;\n    case \"r\":\n      legalMoves = calculateRookMoves(FEN, index);\n      break;\n    case \"n\":\n      legalMoves = calculateKnightMoves(FEN, index);\n      break;\n    case \"b\":\n      legalMoves = calculateBishopMoves(FEN, index);\n      break;\n    case \"q\":\n      legalMoves = calculateQueenMoves(FEN, index);\n      break;\n    case \"k\":\n      if (depth) return calculateCandidateKingMoves(FEN, index);else return calculateKingMoves(FEN, index);\n    default:\n      return [];\n  }\n  if (depth) return legalMoves;\n  const {\n    board\n  } = FEN;\n  const color = board[index] & pieceTypes.White ? pieceTypes.White : pieceTypes.Black;\n  const kingIndex = board.indexOf(color | pieceTypes.King);\n  return legalMoves.filter(move => {\n    return !isKingAttacked(movePiece(FEN, index, move), kingIndex, color);\n  });\n};\nfunction calculatePawnMoves(_ref, index) {\n  let {\n    board\n  } = _ref;\n  let rank = Math.floor(index / 8);\n  let file = index % 8;\n  const candidateMoves = [];\n  if (board[index] & pieceTypes.White) {\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\n    if (rank === 1 && !isOccupied(board, index + 16) && !isOccupied(board, index + 8)) candidateMoves.push(index + 16);\n    if (file > 0 && isOccupied(board, index + 7)) candidateMoves.push(index + 7);\n    if (file < 7 && isOccupied(board, index + 9)) candidateMoves.push(index + 9);\n  } else {\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\n    if (rank === 6 && !isOccupied(board, index - 16) && !isOccupied(board, index - 8)) candidateMoves.push(index - 16);\n    if (file > 0 && isOccupied(board, index - 9)) candidateMoves.push(index - 9);\n    if (file < 7 && isOccupied(board, index - 7)) candidateMoves.push(index - 7);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateRookMoves(board, index) {\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  for (let i = -1; i >= -file; i--) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = 1; i < 8 - file; i++) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = -1; i >= -rank; i--) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  for (let i = 1; i < 8 - rank; i++) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateBishopMoves(board, index) {\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  // console.log(rank, file);\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\n    //up and left\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\n    //down and right\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\n    //up and right\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  for (let i = 1; i < Math.min(file, 8 - rank); i++) {\n    //down and left\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  console.log(legalMoves);\n  return legalMoves;\n}\nfunction calculateKnightMoves(board, index) {\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  if (file > 0) {\n    if (rank > 1) candidateMoves.push(index - 17);\n    if (rank < 6) candidateMoves.push(index + 15);\n  }\n  if (file > 1) {\n    if (rank > 0) candidateMoves.push(index - 10);\n    if (rank < 7) candidateMoves.push(index + 6);\n  }\n  if (file < 6) {\n    if (rank > 0) candidateMoves.push(index - 6);\n    if (rank < 7) candidateMoves.push(index + 10);\n  }\n  if (file < 7) {\n    if (rank > 1) candidateMoves.push(index - 15);\n    if (rank < 6) candidateMoves.push(index + 17);\n  }\n  let legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateQueenMoves(board, index) {\n  return [...calculateBishopMoves(board, index), ...calculateRookMoves(board, index)];\n}\nfunction calculateCandidateKingMoves(board, index) {\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  if (file > 0) {\n    candidateMoves.push(index - 1);\n    if (rank > 0) candidateMoves.push(index - 9);\n    if (rank < 7) candidateMoves.push(index + 7);\n  }\n  if (file < 7) {\n    candidateMoves.push(index + 1);\n    if (rank > 0) candidateMoves.push(index - 7);\n    if (rank < 7) candidateMoves.push(index + 9);\n  }\n  if (rank > 0) candidateMoves.push(index - 8);\n  if (rank < 7) candidateMoves.push(index + 8);\n  return candidateMoves.filter(move => !isSameColor(board, index, move));\n}\nexport function calculateKingMoves(board, index) {\n  const candidateMoves = calculateCandidateKingMoves(board, index);\n  const white = board[index] & pieceTypes.White;\n  const legalMoves = candidateMoves.filter(move => {\n    return !isKingAttacked(movePiece(board, index, move), move, white);\n  });\n  if (true && !isKingAttacked(board, index, white)) {\n    //if king and rook haven't moved yet.\n    if (white) {\n      if (legalMoves.includes(5) && !isKingAttacked(movePiece(board, index, 6), 6, white) && board[6] === 0) {\n        legalMoves.push(6);\n      }\n      if (legalMoves.includes(3) && board[2] === 0 && !isKingAttacked(movePiece(board, index, 2), 2, white) && board[1] === 0) {\n        legalMoves.push(2);\n      }\n    } else {\n      if (legalMoves.includes(61) && !isKingAttacked(movePiece(board, index, 62), 62, white) && board[62] === 0) {\n        legalMoves.push(62);\n      }\n      if (legalMoves.includes(59) && board[58] === 0 && !isKingAttacked(movePiece(board, index, 58), 58, white) && board[57] === 0) {\n        legalMoves.push(58);\n      }\n    }\n  }\n  return legalMoves;\n}\nexport default calculateLegalMovesForPiece;\n\n// // UTILS\n\nfunction isOccupied(board, index) {\n  return board[index] !== 0;\n}\nfunction isSameColor(board, index1, index2) {\n  return board[index1] & board[index2] & pieceTypes.White || board[index1] & board[index2] & pieceTypes.Black;\n}\nfunction movePiece(_ref2, index, move) {\n  let {\n    board\n  } = _ref2;\n  const newBoard = [...board];\n  newBoard[move] = newBoard[index];\n  newBoard[index] = 0;\n  return newBoard;\n}\nfunction isKingAttacked(_ref3, index, color) {\n  let {\n    board\n  } = _ref3;\n  const opponentColor = color & pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\n  const opponentMoves = calculateLegalMoves(board, opponentColor, 1);\n  return opponentMoves.includes(index);\n}","map":{"version":3,"names":["pieces","pieceTypes","decodeFEN","calculateLegalMoves","FEN_str","color","depth","arguments","length","undefined","FEN","board","map","piece","index","filter","moves","calculateLegalMovesForPiece","reduce","acc","val","concat","FEN_string","legalMoves","type","Object","keys","find","key","toLowerCase","calculatePawnMoves","calculateRookMoves","calculateKnightMoves","calculateBishopMoves","calculateQueenMoves","calculateCandidateKingMoves","calculateKingMoves","White","Black","kingIndex","indexOf","King","move","isKingAttacked","movePiece","_ref","rank","Math","floor","file","candidateMoves","isOccupied","push","isSameColor","i","min","console","log","white","includes","index1","index2","_ref2","newBoard","_ref3","opponentColor","opponentMoves"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/src/calculateMoves.js"],"sourcesContent":["import pieces, { pieceTypes } from \"./pieces\";\r\nimport decodeFEN from \"./FENtoBoard\";\r\n\r\nexport const calculateLegalMoves = (FEN_str, color, depth = 0) => {\r\n  const FEN =  decodeFEN(FEN_str);\r\n\r\n  const pieces = FEN.board\r\n    .map((piece, index) => (piece & color ? index : null))\r\n    .filter((piece) => piece !== null);\r\n  const moves = pieces\r\n    .map((index) => {\r\n      return calculateLegalMovesForPiece(FEN, index, depth);\r\n    })\r\n    .reduce((acc, val) => acc.concat(val), []);\r\n\r\n  return moves;\r\n};\r\n\r\nconst calculateLegalMovesForPiece = (FEN_string, index, depth) => {\r\n  let legalMoves;\r\n  const FEN =\r\n    decodeFEN(FEN_string);\r\n  const type = Object.keys(pieces).find((key) => pieces[key] === FEN.board[index]);\r\n\r\n  switch (type.toLowerCase()) {\r\n    case \"p\":\r\n      legalMoves = calculatePawnMoves(FEN, index);\r\n      break;\r\n    case \"r\":\r\n      legalMoves = calculateRookMoves(FEN, index);\r\n      break;\r\n    case \"n\":\r\n      legalMoves = calculateKnightMoves(FEN, index);\r\n      break;\r\n    case \"b\":\r\n      legalMoves = calculateBishopMoves(FEN, index);\r\n      break;\r\n    case \"q\":\r\n      legalMoves = calculateQueenMoves(FEN, index);\r\n      break;\r\n    case \"k\":\r\n      if (depth) return calculateCandidateKingMoves(FEN, index);\r\n      else return calculateKingMoves(FEN, index);\r\n    default:\r\n      return [];\r\n  }\r\n  if (depth) return legalMoves;\r\n\r\n  const {board} = FEN;\r\n  const color =\r\n    board[index] & pieceTypes.White ? pieceTypes.White : pieceTypes.Black;\r\n  const kingIndex = board.indexOf(color | pieceTypes.King);\r\n\r\n  return legalMoves.filter((move) => {\r\n    return !isKingAttacked(movePiece(FEN, index, move), kingIndex, color);\r\n  });\r\n};\r\n\r\nfunction calculatePawnMoves({board}, index) {\r\n  let rank = Math.floor(index / 8);\r\n  let file = index % 8;\r\n  const candidateMoves = [];\r\n  if (board[index] & pieceTypes.White) {\r\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\r\n    if (\r\n      rank === 1 &&\r\n      !isOccupied(board, index + 16) &&\r\n      !isOccupied(board, index + 8)\r\n    )\r\n      candidateMoves.push(index + 16);\r\n    if (file > 0 && isOccupied(board, index + 7))\r\n      candidateMoves.push(index + 7);\r\n    if (file < 7 && isOccupied(board, index + 9))\r\n      candidateMoves.push(index + 9);\r\n  } else {\r\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\r\n    if (\r\n      rank === 6 &&\r\n      !isOccupied(board, index - 16) &&\r\n      !isOccupied(board, index - 8)\r\n    )\r\n      candidateMoves.push(index - 16);\r\n    if (file > 0 && isOccupied(board, index - 9))\r\n      candidateMoves.push(index - 9);\r\n    if (file < 7 && isOccupied(board, index - 7))\r\n      candidateMoves.push(index - 7);\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateRookMoves(board, index) {\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  for (let i = -1; i >= -file; i--) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = 1; i < 8 - file; i++) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = -1; i >= -rank; i--) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  for (let i = 1; i < 8 - rank; i++) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateBishopMoves(board, index) {\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  // console.log(rank, file);\r\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\r\n    //up and left\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\r\n    //down and right\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\r\n    //up and right\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < Math.min(file, 8 - rank); i++) {\r\n    //down and left\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  console.log(legalMoves);\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateKnightMoves(board, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  if (file > 0) {\r\n    if (rank > 1) candidateMoves.push(index - 17);\r\n    if (rank < 6) candidateMoves.push(index + 15);\r\n  }\r\n  if (file > 1) {\r\n    if (rank > 0) candidateMoves.push(index - 10);\r\n    if (rank < 7) candidateMoves.push(index + 6);\r\n  }\r\n  if (file < 6) {\r\n    if (rank > 0) candidateMoves.push(index - 6);\r\n    if (rank < 7) candidateMoves.push(index + 10);\r\n  }\r\n  if (file < 7) {\r\n    if (rank > 1) candidateMoves.push(index - 15);\r\n    if (rank < 6) candidateMoves.push(index + 17);\r\n  }\r\n  let legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateQueenMoves(board, index) {\r\n  return [\r\n    ...calculateBishopMoves(board, index),\r\n    ...calculateRookMoves(board, index),\r\n  ];\r\n}\r\n\r\nfunction calculateCandidateKingMoves(board, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  if (file > 0) {\r\n    candidateMoves.push(index - 1);\r\n    if (rank > 0) candidateMoves.push(index - 9);\r\n    if (rank < 7) candidateMoves.push(index + 7);\r\n  }\r\n  if (file < 7) {\r\n    candidateMoves.push(index + 1);\r\n    if (rank > 0) candidateMoves.push(index - 7);\r\n    if (rank < 7) candidateMoves.push(index + 9);\r\n  }\r\n  if (rank > 0) candidateMoves.push(index - 8);\r\n  if (rank < 7) candidateMoves.push(index + 8);\r\n\r\n  return candidateMoves.filter((move) => !isSameColor(board, index, move));\r\n}\r\n\r\nexport function calculateKingMoves(board, index) {\r\n  const candidateMoves = calculateCandidateKingMoves(board, index);\r\n  const white = board[index] & pieceTypes.White;\r\n  const legalMoves = candidateMoves.filter((move) => {\r\n    return !isKingAttacked(movePiece(board, index, move), move, white);\r\n  });\r\n  if (true && !isKingAttacked(board, index, white)) {\r\n    //if king and rook haven't moved yet.\r\n    if (white) {\r\n      if (\r\n        legalMoves.includes(5) &&\r\n        !isKingAttacked(movePiece(board, index, 6), 6, white) &&\r\n        board[6] === 0\r\n      ) {\r\n        legalMoves.push(6);\r\n      }\r\n      if (\r\n        legalMoves.includes(3) &&\r\n        board[2] === 0 &&\r\n        !isKingAttacked(movePiece(board, index, 2), 2, white) &&\r\n        board[1] === 0\r\n      ) {\r\n        legalMoves.push(2);\r\n      }\r\n    } else {\r\n      if (\r\n        legalMoves.includes(61) &&\r\n        !isKingAttacked(movePiece(board, index, 62), 62, white) &&\r\n        board[62] === 0\r\n      ) {\r\n        legalMoves.push(62);\r\n      }\r\n      if (\r\n        legalMoves.includes(59) &&\r\n        board[58] === 0 &&\r\n        !isKingAttacked(movePiece(board, index, 58), 58, white) &&\r\n        board[57] === 0\r\n      ) {\r\n        legalMoves.push(58);\r\n      }\r\n    }\r\n  }\r\n  return legalMoves;\r\n}\r\n\r\nexport default calculateLegalMovesForPiece;\r\n\r\n// // UTILS\r\n\r\nfunction isOccupied(board, index) {\r\n  return board[index] !== 0;\r\n}\r\n\r\nfunction isSameColor(board, index1, index2) {\r\n  return (\r\n    board[index1] & board[index2] & pieceTypes.White ||\r\n    board[index1] & board[index2] & pieceTypes.Black\r\n  );\r\n}\r\n\r\nfunction movePiece({board}, index, move) {\r\n  const newBoard = [...board];\r\n  newBoard[move] = newBoard[index];\r\n  newBoard[index] = 0;\r\n  return newBoard;\r\n}\r\n\r\nfunction isKingAttacked({board}, index, color) {\r\n  const opponentColor =\r\n    color & pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\r\n  const opponentMoves = calculateLegalMoves(board, opponentColor, 1);\r\n  return opponentMoves.includes(index);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}