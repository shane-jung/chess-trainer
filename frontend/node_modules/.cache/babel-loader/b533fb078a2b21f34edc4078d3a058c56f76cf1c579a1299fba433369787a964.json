{"ast":null,"code":"import pieces from \"./pieces\";\nexport const calculateLegalMoves = function (board, color) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  // console.log(board, color);\n  const selector = color === \"w\" ? 0b10000 : 0b1000;\n  // console.log(\"Selector: \", selector);\n  const pieces = board.map((piece, index) => piece & selector ? index : null).filter(piece => piece !== null);\n  // console.log(pieces);\n  const moves = pieces.map(element => {\n    return calculateLegalMovesForPiece(board, element, depth);\n  }).reduce((acc, val) => acc.concat(val), []);\n  return moves;\n};\nconst calculateLegalMovesForPiece = (board, index, depth) => {\n  const type = Object.keys(pieces).find(key => pieces[key] === board[index]);\n  switch (type.toLowerCase()) {\n    case \"p\":\n      return calculatePawnMoves(board, index);\n    case \"r\":\n      return calculateRookMoves(board, index);\n    case \"n\":\n      return calculateKnightMoves(board, index);\n    case \"b\":\n      return calculateBishopMoves(board, index);\n    case \"q\":\n      return calculateQueenMoves(board, index);\n    case \"k\":\n      if (depth) return calculateCandidateKingMoves(board, index);else return calculateKingMoves(board, index);\n    default:\n      return [];\n  }\n};\nfunction isOccupied(board, index) {\n  return board[index] !== 0;\n}\nfunction isSameColor(board, index1, index2) {\n  return board[index1] & board[index2] & 0b10000 || board[index1] & board[index2] & 0b1000;\n}\nfunction calculatePawnMoves(board, index) {\n  let rank = Math.floor(index / 8);\n  let file = index % 8;\n  const candidateMoves = [];\n  const color = board[index] & 0b10000 ? \"w\" : \"b\";\n  if (color === \"b\") {\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\n    if (rank === 6 && !isOccupied(board, index - 16)) candidateMoves.push(index - 16);\n    if (file > 0 && isOccupied(board, index - 9)) candidateMoves.push(index - 9);\n    if (file < 7 && isOccupied(board, index - 7)) candidateMoves.push(index - 7);\n  } else {\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\n    if (rank === 1 && !isOccupied(board, index + 16)) candidateMoves.push(index + 16);\n    if (file > 0 && isOccupied(board, index + 7)) candidateMoves.push(index + 7);\n    if (file < 7 && isOccupied(board, index + 9)) candidateMoves.push(index + 9);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateRookMoves(board, index) {\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  for (let i = -1; i >= -file; i--) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = 1; i < 8 - file; i++) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = -1; i >= -rank; i--) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  for (let i = 1; i < 8 - rank; i++) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  // console.log(legalMoves);\n  return legalMoves;\n}\nfunction calculateBishopMoves(board, index) {\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\n    //up and left\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\n    //down and right\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\n    //up and right\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  for (let i = 1; i < Math.min(file, 8 - rank); i++) {\n    //down and left\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateKnightMoves(board, index) {\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  if (file > 0) {\n    if (rank > 1) candidateMoves.push(index - 17);\n    if (rank < 6) candidateMoves.push(index + 15);\n  }\n  if (file > 1) {\n    if (rank > 0) candidateMoves.push(index - 10);\n    if (rank < 7) candidateMoves.push(index + 6);\n  }\n  if (file < 6) {\n    if (rank > 0) candidateMoves.push(index - 6);\n    if (rank < 7) candidateMoves.push(index + 10);\n  }\n  if (file < 7) {\n    if (rank > 1) candidateMoves.push(index - 15);\n    if (rank < 6) candidateMoves.push(index + 17);\n  }\n  let legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n\n  // console.log(index, legalMoves);\n  return legalMoves;\n}\nfunction calculateQueenMoves(board, index) {\n  return [...calculateBishopMoves(board, index), ...calculateRookMoves(board, index)];\n}\nfunction calculateCandidateKingMoves(board, index) {\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  const white = board[index] & 0b10000;\n  if (file > 0) {\n    candidateMoves.push(index - 1);\n    if (rank > 0) candidateMoves.push(index - 9);\n    if (rank < 7) candidateMoves.push(index + 7);\n  }\n  if (file < 7) {\n    candidateMoves.push(index + 1);\n    if (rank > 0) candidateMoves.push(index - 7);\n    if (rank < 7) candidateMoves.push(index + 9);\n  }\n  if (rank > 0) candidateMoves.push(index - 8);\n  if (rank < 7) candidateMoves.push(index + 8);\n  if (true) {\n    //if king hasn't moved yet\n    if (white) {\n      if (board[5] === 0 && !isKingAttacked(movePiece(board, index, 5), index) && board[6] === 0) {\n        candidateMoves.push(6);\n      }\n      if (board[1] === 0 && board[2] === 0 && board[3] === 0) {\n        candidateMoves.push(2);\n      }\n    } else {\n      if (board[61] === 0 && board[62] === 0) {\n        //need to check that rook hasn't moved yet\n        candidateMoves.push(62);\n      }\n      if (board[59] === 0 && board[58] === 0 && board[57] === 0) {\n        candidateMoves.push(58);\n      }\n    }\n  }\n  return candidateMoves.filter(move => !isSameColor(board, index, move));\n}\nexport function calculateKingMoves(board, index) {\n  const candidateMoves = calculateCandidateKingMoves(board, index);\n  const legalMoves = candidateMoves.filter(move => {\n    return !isKingAttacked(movePiece(board, index, move), index);\n  });\n  return legalMoves;\n}\nexport default calculateLegalMovesForPiece;\nfunction movePiece(board, index, move) {\n  const newBoard = [...board];\n  newBoard[move] = newBoard[index];\n  newBoard[index] = 0;\n  return newBoard;\n}\nfunction isKingAttacked(board, index) {\n  const kingIndex = board[index];\n  const opponentColor = kingIndex & 0b10000 ? \"b\" : \"w\";\n  const opponentMoves = calculateLegalMoves(board, opponentColor, 1);\n  console.log(\"opponent moves \", opponentMoves);\n  return opponentMoves.includes(kingIndex);\n}","map":{"version":3,"names":["pieces","calculateLegalMoves","board","color","depth","arguments","length","undefined","selector","map","piece","index","filter","moves","element","calculateLegalMovesForPiece","reduce","acc","val","concat","type","Object","keys","find","key","toLowerCase","calculatePawnMoves","calculateRookMoves","calculateKnightMoves","calculateBishopMoves","calculateQueenMoves","calculateCandidateKingMoves","calculateKingMoves","isOccupied","isSameColor","index1","index2","rank","Math","floor","file","candidateMoves","push","legalMoves","move","i","min","white","isKingAttacked","movePiece","newBoard","kingIndex","opponentColor","opponentMoves","console","log","includes"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/src/calculateMoves.js"],"sourcesContent":["import pieces from \"./pieces\";\r\n\r\nexport const calculateLegalMoves = (board, color, depth = 0) => {\r\n  // console.log(board, color);\r\n  const selector = color === \"w\" ? 0b10000 : 0b1000;\r\n  // console.log(\"Selector: \", selector);\r\n  const pieces = board\r\n    .map((piece, index) => (piece & selector ? index : null))\r\n    .filter((piece) => piece !== null);\r\n  // console.log(pieces);\r\n  const moves = pieces\r\n    .map((element) => {\r\n      return calculateLegalMovesForPiece(board, element, depth);\r\n    })\r\n    .reduce((acc, val) => acc.concat(val), []);\r\n\r\n  return moves;\r\n};\r\n\r\nconst calculateLegalMovesForPiece = (board, index, depth) => {\r\n  const type = Object.keys(pieces).find((key) => pieces[key] === board[index]);\r\n  switch (type.toLowerCase()) {\r\n    case \"p\":\r\n      return calculatePawnMoves(board, index);\r\n    case \"r\":\r\n      return calculateRookMoves(board, index);\r\n    case \"n\":\r\n      return calculateKnightMoves(board, index);\r\n    case \"b\":\r\n      return calculateBishopMoves(board, index);\r\n    case \"q\":\r\n      return calculateQueenMoves(board, index);\r\n    case \"k\":\r\n      if (depth) return calculateCandidateKingMoves(board, index);\r\n      else return calculateKingMoves(board, index);\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nfunction isOccupied(board, index) {\r\n  return board[index] !== 0;\r\n}\r\n\r\nfunction isSameColor(board, index1, index2) {\r\n  return (\r\n    board[index1] & board[index2] & 0b10000 ||\r\n    board[index1] & board[index2] & 0b1000\r\n  );\r\n}\r\n\r\nfunction calculatePawnMoves(board, index) {\r\n  let rank = Math.floor(index / 8);\r\n  let file = index % 8;\r\n  const candidateMoves = [];\r\n  const color = board[index] & 0b10000 ? \"w\" : \"b\";\r\n  if (color === \"b\") {\r\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\r\n    if (rank === 6 && !isOccupied(board, index - 16))\r\n      candidateMoves.push(index - 16);\r\n    if (file > 0 && isOccupied(board, index - 9))\r\n      candidateMoves.push(index - 9);\r\n    if (file < 7 && isOccupied(board, index - 7))\r\n      candidateMoves.push(index - 7);\r\n  } else {\r\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\r\n    if (rank === 1 && !isOccupied(board, index + 16))\r\n      candidateMoves.push(index + 16);\r\n    if (file > 0 && isOccupied(board, index + 7))\r\n      candidateMoves.push(index + 7);\r\n    if (file < 7 && isOccupied(board, index + 9))\r\n      candidateMoves.push(index + 9);\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateRookMoves(board, index) {\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  for (let i = -1; i >= -file; i--) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = 1; i < 8 - file; i++) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = -1; i >= -rank; i--) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  for (let i = 1; i < 8 - rank; i++) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  // console.log(legalMoves);\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateBishopMoves(board, index) {\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\r\n    //up and left\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\r\n    //down and right\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\r\n    //up and right\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < Math.min(file, 8 - rank); i++) {\r\n    //down and left\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateKnightMoves(board, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  if (file > 0) {\r\n    if (rank > 1) candidateMoves.push(index - 17);\r\n    if (rank < 6) candidateMoves.push(index + 15);\r\n  }\r\n  if (file > 1) {\r\n    if (rank > 0) candidateMoves.push(index - 10);\r\n    if (rank < 7) candidateMoves.push(index + 6);\r\n  }\r\n  if (file < 6) {\r\n    if (rank > 0) candidateMoves.push(index - 6);\r\n    if (rank < 7) candidateMoves.push(index + 10);\r\n  }\r\n  if (file < 7) {\r\n    if (rank > 1) candidateMoves.push(index - 15);\r\n    if (rank < 6) candidateMoves.push(index + 17);\r\n  }\r\n\r\n  let legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n\r\n  // console.log(index, legalMoves);\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateQueenMoves(board, index) {\r\n  return [\r\n    ...calculateBishopMoves(board, index),\r\n    ...calculateRookMoves(board, index),\r\n  ];\r\n}\r\n\r\nfunction calculateCandidateKingMoves(board, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  const white = board[index] & 0b10000;\r\n  if (file > 0) {\r\n    candidateMoves.push(index - 1);\r\n    if (rank > 0) candidateMoves.push(index - 9);\r\n    if (rank < 7) candidateMoves.push(index + 7);\r\n  }\r\n  if (file < 7) {\r\n    candidateMoves.push(index + 1);\r\n    if (rank > 0) candidateMoves.push(index - 7);\r\n    if (rank < 7) candidateMoves.push(index + 9);\r\n  }\r\n  if (rank > 0) candidateMoves.push(index - 8);\r\n  if (rank < 7) candidateMoves.push(index + 8);\r\n\r\n  if (true) {\r\n    //if king hasn't moved yet\r\n    if (white) {\r\n      if (board[5] === 0 && !isKingAttacked(movePiece(board, index, 5), index) && board[6] === 0) {\r\n        candidateMoves.push(6);\r\n      }\r\n      if (board[1] === 0 && board[2] === 0 &&  board[3] === 0) {\r\n        candidateMoves.push(2);\r\n      }\r\n    } else {\r\n      if (board[61] === 0 && board[62] === 0) {\r\n        //need to check that rook hasn't moved yet\r\n        candidateMoves.push(62);\r\n      }\r\n      if (board[59] === 0 && board[58] === 0 && board[57] === 0) {\r\n        candidateMoves.push(58);\r\n      }\r\n    }\r\n  }\r\n\r\n  return candidateMoves.filter((move) => !isSameColor(board, index, move));\r\n}\r\n\r\nexport function calculateKingMoves(board, index) {\r\n  const candidateMoves = calculateCandidateKingMoves(board, index);\r\n  const legalMoves = candidateMoves.filter((move) => {\r\n    return !isKingAttacked(movePiece(board, index, move), index)\r\n  });\r\n  return legalMoves;\r\n}\r\n\r\nexport default calculateLegalMovesForPiece;\r\n\r\n\r\nfunction movePiece(board, index, move) {\r\n  const newBoard = [...board];\r\n  newBoard[move] = newBoard[index];\r\n  newBoard[index] = 0;\r\n  return newBoard;\r\n}\r\n\r\nfunction isKingAttacked(board, index) {\r\n  const kingIndex = board[index];\r\n  const opponentColor = kingIndex & 0b10000 ? \"b\" : \"w\";\r\n  const opponentMoves = calculateLegalMoves(board, opponentColor, 1);\r\n  console.log(\"opponent moves \" ,opponentMoves);\r\n  return opponentMoves.includes(kingIndex);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}