{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shane\\\\Documents\\\\Projects\\\\chess-trainer\\\\src\\\\Piece.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectActivePiece, selectLegalMoves, selectTurn, selectFen } from \"./slices/game\";\nimport useAction, { setActivePieceAction, setLegalMovesAction, rotateTurnAction, setFenAction, recordMoveAction, handleMoveAction } from \"./actions\";\nimport pieces, { pieceTypes } from \"./pieces\";\nimport calculateLegalMovesForPiece, { calculateLegalMoves, isKingAttacked } from \"./calculateMoves\";\nimport { movePiece, moveToAlgebraicChessNotation, algebraidChessNotationToMove } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Piece(_ref) {\n  _s();\n  let {\n    piece: initial,\n    index\n  } = _ref;\n  // const board = useSelector(selectBoard);\n  const fen = useSelector(selectFen);\n  const activePiece = useSelector(selectActivePiece);\n  const setActivePiece = useAction(setActivePieceAction);\n  const legalMoves = useSelector(selectLegalMoves);\n  const setLegalMoves = useAction(setLegalMovesAction);\n  const turn = useSelector(selectTurn);\n  const rotateTurn = useAction(rotateTurnAction);\n  const setFen = useAction(setFenAction);\n  const recordMove = useAction(recordMoveAction);\n  const handleMove = useAction(handleMoveAction);\n  const [color, setColor] = useState(0b10000 & initial ? \"w\" : \"b\");\n  const [type, setType] = useState(Object.keys(pieces).find(key => pieces[key] === initial));\n  const [isDragging, setIsDragging] = useState(false);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    setColor(0b10000 & initial ? \"w\" : \"b\");\n    setType(Object.keys(pieces).find(key => pieces[key] === initial));\n    console.log(algebraidChessNotationToMove(fen, \"e4\"));\n  }, [initial]);\n  const handleMouseDown = event => {\n    // console.log(turn, color);\n    event.preventDefault();\n    setActivePiece(index);\n    setIsDragging(true);\n    const piece = event.target.getBoundingClientRect();\n    setOffset({\n      x: piece.left + piece.width / 2,\n      y: piece.top + piece.height / 2\n    });\n    setPosition({\n      x: event.clientX - piece.left - piece.width / 2,\n      y: event.clientY - piece.top - piece.height / 2\n    });\n\n    // console.log(\"FEN PIECES\", FEN);\n    setLegalMoves(calculateLegalMovesForPiece(fen, index));\n  };\n  const handleMouseMove = event => {\n    if (!isDragging) return;\n    setPosition({\n      x: -offset.x + event.clientX,\n      y: -offset.y + event.clientY\n    });\n  };\n  const handleMouseUp = event => {\n    setIsDragging(false);\n    const boardRect = document.getElementById(\"board\").getBoundingClientRect();\n    const rank = Math.floor((event.clientY - boardRect.top) / 70);\n    const file = Math.floor((event.clientX - boardRect.left) / 70);\n    const to = rank * 8 + file;\n    if (turn !== color) {\n      premove();\n      setPosition({\n        x: 0,\n        y: 0\n      });\n      return;\n    }\n    if (!legalMoves.includes(to)) {\n      setPosition({\n        x: 0,\n        y: 0\n      });\n      return;\n    }\n    playTurn(index, to);\n  };\n  function premove() {\n    console.log(\"premove\");\n  }\n  function playTurn(from, to) {\n    let board = movePiece(fen.board, {\n      from,\n      to\n    });\n    let castling = fen.castling;\n    let enPassant = \"\";\n    let halfMoveClock = fen.halfMoveClock + 1;\n    let fullMoveNumber = fen.fullMoveNumber + (color === \"b\" ? 1 : 0);\n    const capturedPiece = fen.board[to] & 0b11111;\n    const type = fen.board[from] & 0b111;\n    const notation = moveToAlgebraicChessNotation(fen, from, to);\n    recordMove({\n      from,\n      to\n    }, notation, capturedPiece);\n\n    //dispatch handleMove Action \n\n    handleMove(from, to);\n\n    // castling\n\n    let toRemove = [];\n    if (type === pieceTypes.King) {\n      if (color === \"w\") toRemove += \"KQ\";else toRemove += \"kq\";\n      if (to === from + 2) board = movePiece(board, {\n        from: from + 3,\n        to: from + 1\n      });else if (to === from - 2) board = movePiece(board, {\n        from: from - 4,\n        to: from - 1\n      });\n    } else if (type === pieceTypes.Rook) {\n      if (color === \"w\") {\n        if (from === 7) toRemove += \"K\";else if (from === 0) toRemove += \"Q\";\n      } else {\n        if (from === 63) toRemove += \"k\";else if (from === 56) toRemove += \"q\";\n      }\n    }\n\n    // en passant\n    else if (type === pieceTypes.Pawn) {\n      halfMoveClock = 0;\n      if (color === \"w\") {\n        if (to - from === 16) enPassant = to - 8;else if (to - from === -16) enPassant = to + 8;\n        if (fen.enPassant === to) board[to - 8] = 0;\n      } else {\n        if (to - from === 16) enPassant = to - 8;else if (to - from === -16) enPassant = to + 8;\n        if (fen.enPassant === to) board[to + 8] = 0;\n      }\n    }\n    [...toRemove].forEach(el => castling = castling.replace(el, \"\"));\n    const newFen = {\n      ...fen,\n      board,\n      castling,\n      enPassant,\n      halfMoveClock,\n      fullMoveNumber\n    };\n    setFen(newFen);\n    if (checkGameOver(newFen)) {\n      console.log(\"GAME OVER\");\n      return;\n    }\n    rotateTurn();\n  }\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    style: {\n      left: position.x,\n      top: position.y\n    },\n    className: \"piece\" + (activePiece === index ? \" active\" : \"\"),\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp,\n    src: `pieces/${color === null || color === void 0 ? void 0 : color.toLowerCase()}${type === null || type === void 0 ? void 0 : type.toUpperCase()}.svg`,\n    alt: \"Chess Piece\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n_s(Piece, \"ETU1sQMW1VG4NrhtVryhNcl2WaM=\", false, function () {\n  return [useSelector, useSelector, useAction, useSelector, useAction, useSelector, useAction, useAction, useAction, useAction];\n});\n_c = Piece;\nfunction checkGameOver(fen) {\n  const board = fen.board;\n  const turn = fen.turn;\n  const color = turn === \"w\" ? 0b1000 : 0b10000;\n  const king = color | pieceTypes.King;\n  const kingIndex = board.indexOf(king);\n  const legalKingMoves = calculateLegalMovesForPiece(fen, kingIndex);\n  // console.log(legalMoves, isKingAttacked(fen, kingIndex));\n  return legalKingMoves.length === 0 && isKingAttacked(fen, color) && calculateLegalMoves(fen, color).length === 0;\n}\nvar _c;\n$RefreshReg$(_c, \"Piece\");","map":{"version":3,"names":["useState","useEffect","useSelector","selectActivePiece","selectLegalMoves","selectTurn","selectFen","useAction","setActivePieceAction","setLegalMovesAction","rotateTurnAction","setFenAction","recordMoveAction","handleMoveAction","pieces","pieceTypes","calculateLegalMovesForPiece","calculateLegalMoves","isKingAttacked","movePiece","moveToAlgebraicChessNotation","algebraidChessNotationToMove","jsxDEV","_jsxDEV","Piece","_ref","_s","piece","initial","index","fen","activePiece","setActivePiece","legalMoves","setLegalMoves","turn","rotateTurn","setFen","recordMove","handleMove","color","setColor","type","setType","Object","keys","find","key","isDragging","setIsDragging","position","setPosition","x","y","offset","setOffset","console","log","handleMouseDown","event","preventDefault","target","getBoundingClientRect","left","width","top","height","clientX","clientY","handleMouseMove","handleMouseUp","boardRect","document","getElementById","rank","Math","floor","file","to","premove","includes","playTurn","from","board","castling","enPassant","halfMoveClock","fullMoveNumber","capturedPiece","notation","toRemove","King","Rook","Pawn","forEach","el","replace","newFen","checkGameOver","style","className","onMouseDown","onMouseMove","onMouseUp","src","toLowerCase","toUpperCase","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","king","kingIndex","indexOf","legalKingMoves","length","$RefreshReg$"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/src/Piece.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  selectActivePiece,\r\n  selectLegalMoves,\r\n  selectTurn,\r\n  selectFen,\r\n} from \"./slices/game\";\r\nimport useAction, {\r\n  setActivePieceAction,\r\n  setLegalMovesAction,\r\n  rotateTurnAction,\r\n  setFenAction,\r\n  recordMoveAction,\r\n  handleMoveAction,\r\n} from \"./actions\";\r\n\r\nimport pieces, { pieceTypes } from \"./pieces\";\r\nimport calculateLegalMovesForPiece, {\r\n  calculateLegalMoves,\r\n  isKingAttacked,\r\n} from \"./calculateMoves\";\r\n\r\nimport { movePiece, moveToAlgebraicChessNotation, algebraidChessNotationToMove} from \"./utils\";\r\n\r\nexport default function Piece({ piece: initial, index }) {\r\n  // const board = useSelector(selectBoard);\r\n  const fen = useSelector(selectFen);\r\n  const activePiece = useSelector(selectActivePiece);\r\n  const setActivePiece = useAction(setActivePieceAction);\r\n\r\n  const legalMoves = useSelector(selectLegalMoves);\r\n  const setLegalMoves = useAction(setLegalMovesAction);\r\n\r\n  const turn = useSelector(selectTurn);\r\n  const rotateTurn = useAction(rotateTurnAction);\r\n\r\n  const setFen = useAction(setFenAction);\r\n\r\n  const recordMove = useAction(recordMoveAction);\r\n  const handleMove = useAction(handleMoveAction);\r\n\r\n  const [color, setColor] = useState(0b10000 & initial ? \"w\" : \"b\");\r\n  const [type, setType] = useState(\r\n    Object.keys(pieces).find((key) => pieces[key] === initial)\r\n  );\r\n\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    setColor(0b10000 & initial ? \"w\" : \"b\");\r\n    setType(Object.keys(pieces).find((key) => pieces[key] === initial));\r\n    console.log(algebraidChessNotationToMove(fen, \"e4\"));\r\n  }, [initial]);\r\n\r\n  const handleMouseDown = (event) => {\r\n    // console.log(turn, color);\r\n    event.preventDefault();\r\n    setActivePiece(index);\r\n    setIsDragging(true);\r\n\r\n    const piece = event.target.getBoundingClientRect();\r\n    setOffset({\r\n      x: piece.left + piece.width / 2,\r\n      y: piece.top + piece.height / 2,\r\n    });\r\n    setPosition({\r\n      x: event.clientX - piece.left - piece.width / 2,\r\n      y: event.clientY - piece.top - piece.height / 2,\r\n    });\r\n\r\n    // console.log(\"FEN PIECES\", FEN);\r\n    setLegalMoves(calculateLegalMovesForPiece(fen, index));\r\n  };\r\n\r\n  const handleMouseMove = (event) => {\r\n    if (!isDragging) return;\r\n    setPosition({\r\n      x: -offset.x + event.clientX,\r\n      y: -offset.y + event.clientY,\r\n    });\r\n  };\r\n\r\n  const handleMouseUp = (event) => {\r\n    setIsDragging(false);\r\n    const boardRect = document.getElementById(\"board\").getBoundingClientRect();\r\n    const rank = Math.floor((event.clientY - boardRect.top) / 70);\r\n    const file = Math.floor((event.clientX - boardRect.left) / 70);\r\n    const to = rank * 8 + file;\r\n\r\n    if (turn !== color) {\r\n      premove();\r\n      setPosition({ x: 0, y: 0 });\r\n      return;\r\n    }\r\n\r\n    if (!legalMoves.includes(to)) {\r\n      setPosition({ x: 0, y: 0 });\r\n      return;\r\n    }\r\n    playTurn(index, to);\r\n  };\r\n\r\n  function premove() {\r\n    console.log(\"premove\");\r\n  }\r\n\r\n  function playTurn(from, to) {\r\n    let board = movePiece(fen.board, { from, to });\r\n    let castling = fen.castling;\r\n    let enPassant = \"\";\r\n    let halfMoveClock = fen.halfMoveClock + 1;\r\n    let fullMoveNumber = fen.fullMoveNumber + (color === \"b\" ? 1 : 0);\r\n    const capturedPiece = fen.board[to] & 0b11111;\r\n    const type = fen.board[from] & 0b111;\r\n    const notation = moveToAlgebraicChessNotation(fen, from, to);\r\n    recordMove({ from, to }, notation, capturedPiece);\r\n\r\n    //dispatch handleMove Action \r\n\r\n    handleMove(from, to);\r\n\r\n    // castling\r\n\r\n    let toRemove = [];\r\n    if (type === pieceTypes.King) {\r\n      if (color === \"w\") toRemove += \"KQ\";\r\n      else toRemove += \"kq\";\r\n\r\n      if (to === from + 2)\r\n        board = movePiece(board, { from: from + 3, to: from + 1 });\r\n      else if (to === from - 2)\r\n        board = movePiece(board, { from: from - 4, to: from - 1 });\r\n    } else if (type === pieceTypes.Rook) {\r\n      if (color === \"w\") {\r\n        if (from === 7) toRemove += \"K\";\r\n        else if (from === 0) toRemove += \"Q\";\r\n      } else {\r\n        if (from === 63) toRemove += \"k\";\r\n        else if (from === 56) toRemove += \"q\";\r\n      }\r\n    }\r\n\r\n    // en passant\r\n    else if (type === pieceTypes.Pawn) {\r\n      halfMoveClock = 0;\r\n      if (color === \"w\") {\r\n        if (to - from === 16) enPassant = to - 8;\r\n        else if (to - from === -16) enPassant = to + 8;\r\n        if (fen.enPassant === to) board[to - 8] = 0;\r\n      } else {\r\n        if (to - from === 16) enPassant = to - 8;\r\n        else if (to - from === -16) enPassant = to + 8;\r\n        if (fen.enPassant === to) board[to + 8] = 0;\r\n      }\r\n    }\r\n\r\n    [...toRemove].forEach((el) => (castling = castling.replace(el, \"\")));\r\n\r\n    const newFen = {\r\n      ...fen,\r\n      board,\r\n      castling,\r\n      enPassant,\r\n      halfMoveClock,\r\n      fullMoveNumber,\r\n    };\r\n\r\n    setFen(newFen);\r\n\r\n    if (checkGameOver(newFen)) {\r\n      console.log(\"GAME OVER\");\r\n      return;\r\n    }\r\n    rotateTurn();\r\n  }\r\n\r\n  return (\r\n    <img\r\n      style={{ left: position.x, top: position.y }}\r\n      className={\"piece\" + (activePiece === index ? \" active\" : \"\")}\r\n      onMouseDown={handleMouseDown}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseUp={handleMouseUp}\r\n      src={`pieces/${color?.toLowerCase()}${type?.toUpperCase()}.svg`}\r\n      alt=\"Chess Piece\"\r\n    />\r\n  );\r\n}\r\n\r\nfunction checkGameOver(fen) {\r\n  const board = fen.board;\r\n  const turn = fen.turn;\r\n  const color = turn === \"w\" ? 0b1000 : 0b10000;\r\n  const king = color | pieceTypes.King;\r\n  const kingIndex = board.indexOf(king);\r\n  const legalKingMoves = calculateLegalMovesForPiece(fen, kingIndex);\r\n  // console.log(legalMoves, isKingAttacked(fen, kingIndex));\r\n  return (\r\n    legalKingMoves.length === 0 &&\r\n    isKingAttacked(fen, color) &&\r\n    calculateLegalMoves(fen, color).length === 0\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}