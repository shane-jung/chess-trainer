{"ast":null,"code":"import pieces from \"./pieces\";\nexport const calculateLegalMoves = (board, index) => {\n  const whitePieces = board.map((piece, index) => piece & 0b10000 ? index : null).filter(piece => piece !== null);\n  const blackPieces = board.map((piece, index) => piece & 0b1000 ? index : null).filter(piece => piece !== null);\n  const whiteMoves = whitePieces.map(element => {\n    return calculateLegalMovesForPiece(board, element);\n  }).reduce((acc, val) => acc.concat(val), []);\n  const blackMoves = [...blackPieces].map(element => {\n    return calculateLegalMovesForPiece(board, element);\n  }).reduce((acc, val) => acc.concat(val), []);\n  console.log(blackMoves, whiteMoves);\n};\nconst calculateLegalMovesForPiece = (board, index) => {\n  console.log(index);\n  const type = Object.keys(pieces).find(key => pieces[key] === board[index]);\n  console.log(type);\n  return [];\n  switch (type.toLowerCase()) {\n    case \"p\":\n      return calculatePawnMoves(board, index);\n    case \"r\":\n      return calculateRookMoves(board, index);\n    case \"n\":\n      return calculateKnightMoves(board, index);\n    case \"b\":\n      return calculateBishopMoves(board, index);\n    case \"q\":\n      return calculateQueenMoves(board, index);\n    case \"k\":\n      return calculateKingMoves(board, index);\n    default:\n      return [];\n  }\n};\nfunction isOccupied(board, index) {\n  return board[index] !== 0;\n}\nfunction isSameColor(board, index1, index2) {\n  return board[index1] & board[index2] & 0b10000 || board[index1] & board[index2] & 0b1000;\n}\nfunction calculatePawnMoves(board, index) {\n  let rank = Math.floor(index / 8);\n  let file = index % 8;\n  const candidateMoves = [];\n  const color = board[index] & 0b10000 ? \"w\" : \"b\";\n  if (color === \"b\") {\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\n    if (rank === 6 && !isOccupied(board, index - 16)) candidateMoves.push(index - 16);\n    if (file > 0 && isOccupied(board, index - 9)) candidateMoves.push(index - 9);\n    if (file < 7 && isOccupied(board, index - 7)) candidateMoves.push(index - 7);\n  } else {\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\n    if (rank === 1 && !isOccupied(board, index + 16)) candidateMoves.push(index + 16);\n    if (file > 0 && isOccupied(board, index + 7)) candidateMoves.push(index + 7);\n    if (file < 7 && isOccupied(board, index + 9)) candidateMoves.push(index + 9);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateRookMoves(board, index) {\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  for (let i = -1; i >= -file; i--) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = 1; i < 8 - file; i++) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = -1; i >= -rank; i--) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  for (let i = 1; i < 8 - rank; i++) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  // console.log(legalMoves);\n  return legalMoves;\n}\nfunction calculateBishopMoves(board, index) {\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\n    //up and left\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\n    //down and right\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\n    //up and right\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  for (let i = 1; i < file + 1; i++) {\n    //down and left\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateKnightMoves(board, index) {\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  if (file > 0) {\n    if (rank > 1) candidateMoves.push(index - 17);\n    if (rank < 6) candidateMoves.push(index + 15);\n  }\n  if (file > 1) {\n    if (rank > 0) candidateMoves.push(index - 10);\n    if (rank < 7) candidateMoves.push(index + 6);\n  }\n  if (file < 6) {\n    if (rank > 0) candidateMoves.push(index - 6);\n    if (rank < 7) candidateMoves.push(index + 10);\n  }\n  if (file < 7) {\n    if (rank > 1) candidateMoves.push(index - 15);\n    if (rank < 6) candidateMoves.push(index + 17);\n  }\n  let legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  console.log(index, legalMoves);\n  return legalMoves;\n}\nfunction calculateQueenMoves(board, index) {\n  return [...calculateBishopMoves(board, index), ...calculateRookMoves(board, index)];\n}\nfunction calculateKingMoves(board, index) {\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  if (file > 0) {\n    candidateMoves.push(index - 1);\n    if (rank > 0) candidateMoves.push(index - 9);\n    if (rank < 7) candidateMoves.push(index + 7);\n  }\n  if (file < 7) {\n    candidateMoves.push(index + 1);\n    if (rank > 0) candidateMoves.push(index - 7);\n    if (rank < 7) candidateMoves.push(index + 9);\n  }\n  if (rank > 0) candidateMoves.push(index - 8);\n  if (rank < 7) candidateMoves.push(index + 8);\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nexport default calculateLegalMovesForPiece;","map":{"version":3,"names":["pieces","calculateLegalMoves","board","index","whitePieces","map","piece","filter","blackPieces","whiteMoves","element","calculateLegalMovesForPiece","reduce","acc","val","concat","blackMoves","console","log","type","Object","keys","find","key","toLowerCase","calculatePawnMoves","calculateRookMoves","calculateKnightMoves","calculateBishopMoves","calculateQueenMoves","calculateKingMoves","isOccupied","isSameColor","index1","index2","rank","Math","floor","file","candidateMoves","color","push","legalMoves","move","i","min"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/src/calculateMoves.js"],"sourcesContent":["import pieces from \"./pieces\";\r\n\r\nexport const calculateLegalMoves = (board, index) => {\r\n  const whitePieces = board.map((piece, index) => (piece & 0b10000) ? index : null).filter((piece) => piece !== null);\r\n  const blackPieces = board.map((piece, index) => (piece & 0b1000) ? index : null).filter((piece) => piece !== null);\r\n\r\n  const whiteMoves= whitePieces.map(element => {\r\n    return calculateLegalMovesForPiece(board, element);\r\n  }).reduce((acc, val) => acc.concat(val), []);\r\n  \r\n  const blackMoves = [...blackPieces].map(element => {\r\n    return calculateLegalMovesForPiece(board, element);\r\n  }).reduce((acc, val) => acc.concat(val), []);\r\n\r\n  console.log(blackMoves, whiteMoves);\r\n}\r\n\r\nconst calculateLegalMovesForPiece= (board, index) => {\r\n  console.log(index);\r\n  const type = Object.keys(pieces).find((key) => pieces[key] === board[index]);\r\nconsole.log(type);\r\nreturn [];\r\n  switch (type.toLowerCase()) {\r\n    case \"p\":\r\n      return calculatePawnMoves(board, index);\r\n    case \"r\":\r\n      return calculateRookMoves(board, index);\r\n    case \"n\":\r\n      return calculateKnightMoves(board, index);\r\n    case \"b\":\r\n      return calculateBishopMoves(board, index);\r\n\r\n    case \"q\":\r\n      return calculateQueenMoves(board, index);\r\n    case \"k\":\r\n      return calculateKingMoves(board, index);\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nfunction isOccupied(board, index) {\r\n  return board[index] !== 0;\r\n}\r\n\r\nfunction isSameColor(board, index1, index2) {\r\n  return (\r\n    board[index1] & board[index2] & 0b10000 ||\r\n    board[index1] & board[index2] & 0b1000\r\n  );\r\n}\r\n\r\nfunction calculatePawnMoves(board, index) {\r\n  let rank = Math.floor(index / 8);\r\n  let file = index % 8;\r\n  const candidateMoves = [];\r\n  const color = board[index] & 0b10000 ? \"w\" : \"b\";\r\n  if (color === \"b\") {\r\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\r\n    if (rank === 6 && !isOccupied(board, index - 16))\r\n      candidateMoves.push(index - 16);\r\n    if (file > 0 && isOccupied(board, index - 9))\r\n      candidateMoves.push(index - 9);\r\n    if (file < 7 && isOccupied(board, index - 7))\r\n      candidateMoves.push(index - 7);\r\n  } else {\r\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\r\n    if (rank === 1 && !isOccupied(board, index + 16))\r\n      candidateMoves.push(index + 16);\r\n    if (file > 0 && isOccupied(board, index + 7))\r\n      candidateMoves.push(index + 7);\r\n    if (file < 7 && isOccupied(board, index + 9))\r\n      candidateMoves.push(index + 9);\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateRookMoves(board, index) {\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  for (let i = -1; i >= -file; i--) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = 1; i < 8 - file; i++) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = -1; i >= -rank; i--) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  for (let i = 1; i < 8 - rank; i++) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  // console.log(legalMoves);\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateBishopMoves(board, index) {\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\r\n    //up and left\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\r\n    //down and right\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\r\n    //up and right\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < file + 1; i++) {\r\n    //down and left\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateKnightMoves(board, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  if (file > 0) {\r\n    if (rank > 1) candidateMoves.push(index - 17);\r\n    if (rank < 6) candidateMoves.push(index + 15);\r\n  }\r\n  if (file > 1) {\r\n    if (rank > 0) candidateMoves.push(index - 10);\r\n    if (rank < 7) candidateMoves.push(index + 6);\r\n  }\r\n  if (file < 6) {\r\n    if (rank > 0) candidateMoves.push(index - 6);\r\n    if (rank < 7) candidateMoves.push(index + 10);\r\n  }\r\n  if (file < 7) {\r\n    if (rank > 1) candidateMoves.push(index - 15);\r\n    if (rank < 6) candidateMoves.push(index + 17);\r\n  }\r\n\r\n  let legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n\r\n  console.log(index, legalMoves);\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateQueenMoves(board, index) {\r\n  return [\r\n    ...calculateBishopMoves(board, index),\r\n    ...calculateRookMoves(board, index),\r\n  ];\r\n}\r\n\r\nfunction calculateKingMoves(board, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  if (file > 0) {\r\n    candidateMoves.push(index - 1);\r\n    if (rank > 0) candidateMoves.push(index - 9);\r\n    if (rank < 7) candidateMoves.push(index + 7);\r\n  }\r\n  if (file < 7) {\r\n    candidateMoves.push(index + 1);\r\n    if (rank > 0) candidateMoves.push(index - 7);\r\n    if (rank < 7) candidateMoves.push(index + 9);\r\n  }\r\n  if (rank > 0) candidateMoves.push(index - 8);\r\n  if (rank < 7) candidateMoves.push(index + 8);\r\n\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  return legalMoves;\r\n}\r\n\r\nexport default calculateLegalMovesForPiece;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}