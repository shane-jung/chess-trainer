{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shane\\\\Documents\\\\Projects\\\\chess-trainer\\\\src\\\\Pieces.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pieces() {\n  _s();\n  useEffect(() => {\n    const spriteSheet = new Image();\n    spriteSheet.src = 'pieces.jpg'; // Replace with your image path\n    spriteSheet.onload = extractChessPieces;\n    function extractChessPieces() {\n      const canvas = document.getElementById('canvas');\n      console.log(canvas);\n      const ctx = canvas.getContext('2d');\n      const pieceWidth = 50; // Adjust the dimensions to match your piece size\n      const pieceHeight = 50;\n      canvas.width = pieceWidth;\n      canvas.height = pieceHeight;\n      const pieces = ['white-king', 'black-king', 'white-queen', 'black-queen']; // Add other piece names\n\n      pieces.forEach((piece, index) => {\n        const posX = index * pieceWidth % spriteSheet.width;\n        const posY = Math.floor(index * pieceWidth / spriteSheet.width) * pieceHeight;\n        ctx.clearRect(0, 0, pieceWidth, pieceHeight);\n        ctx.drawImage(spriteSheet, posX, posY, pieceWidth, pieceHeight, 0, 0, pieceWidth, pieceHeight);\n        const dataURL = canvas.toDataURL();\n        const img = new Image();\n        img.src = dataURL;\n        img.alt = piece;\n        document.body.appendChild(img); // Add the image to the desired location in your HTML\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Pieces, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Pieces;\nvar _c;\n$RefreshReg$(_c, \"Pieces\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","Pieces","_s","spriteSheet","Image","src","onload","extractChessPieces","canvas","document","getElementById","console","log","ctx","getContext","pieceWidth","pieceHeight","width","height","pieces","forEach","piece","index","posX","posY","Math","floor","clearRect","drawImage","dataURL","toDataURL","img","alt","body","appendChild","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/src/Pieces.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nexport default function Pieces() {\r\nuseEffect(() => {\r\nconst spriteSheet = new Image();\r\nspriteSheet.src = 'pieces.jpg'; // Replace with your image path\r\nspriteSheet.onload = extractChessPieces;\r\n\r\nfunction extractChessPieces() {\r\n  const canvas = document.getElementById('canvas');\r\n  console.log(canvas)\r\n  const ctx = canvas.getContext('2d');\r\n  \r\n  const pieceWidth = 50; // Adjust the dimensions to match your piece size\r\n  const pieceHeight = 50;\r\n  \r\n  canvas.width = pieceWidth;\r\n  canvas.height = pieceHeight;\r\n  \r\n  const pieces = ['white-king', 'black-king', 'white-queen', 'black-queen']; // Add other piece names\r\n  \r\n  pieces.forEach((piece, index) => {\r\n    const posX = (index * pieceWidth) % spriteSheet.width;\r\n    const posY = Math.floor((index * pieceWidth) / spriteSheet.width) * pieceHeight;\r\n    \r\n    ctx.clearRect(0, 0, pieceWidth, pieceHeight);\r\n    ctx.drawImage(spriteSheet, posX, posY, pieceWidth, pieceHeight, 0, 0, pieceWidth, pieceHeight);\r\n    \r\n    const dataURL = canvas.toDataURL();\r\n    \r\n    const img = new Image();\r\n    img.src = dataURL;\r\n    img.alt = piece;\r\n    \r\n    document.body.appendChild(img); // Add the image to the desired location in your HTML\r\n  });\r\n}}, []);\r\n  return (\r\n    <div>\r\n        <canvas id=\"canvas\"></canvas>\r\n    </div>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACjCJ,SAAS,CAAC,MAAM;IAChB,MAAMK,WAAW,GAAG,IAAIC,KAAK,CAAC,CAAC;IAC/BD,WAAW,CAACE,GAAG,GAAG,YAAY,CAAC,CAAC;IAChCF,WAAW,CAACG,MAAM,GAAGC,kBAAkB;IAEvC,SAASA,kBAAkBA,CAAA,EAAG;MAC5B,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;MAChDC,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;MACnB,MAAMK,GAAG,GAAGL,MAAM,CAACM,UAAU,CAAC,IAAI,CAAC;MAEnC,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;MACvB,MAAMC,WAAW,GAAG,EAAE;MAEtBR,MAAM,CAACS,KAAK,GAAGF,UAAU;MACzBP,MAAM,CAACU,MAAM,GAAGF,WAAW;MAE3B,MAAMG,MAAM,GAAG,CAAC,YAAY,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;;MAE3EA,MAAM,CAACC,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QAC/B,MAAMC,IAAI,GAAID,KAAK,GAAGP,UAAU,GAAIZ,WAAW,CAACc,KAAK;QACrD,MAAMO,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAEJ,KAAK,GAAGP,UAAU,GAAIZ,WAAW,CAACc,KAAK,CAAC,GAAGD,WAAW;QAE/EH,GAAG,CAACc,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEZ,UAAU,EAAEC,WAAW,CAAC;QAC5CH,GAAG,CAACe,SAAS,CAACzB,WAAW,EAAEoB,IAAI,EAAEC,IAAI,EAAET,UAAU,EAAEC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAED,UAAU,EAAEC,WAAW,CAAC;QAE9F,MAAMa,OAAO,GAAGrB,MAAM,CAACsB,SAAS,CAAC,CAAC;QAElC,MAAMC,GAAG,GAAG,IAAI3B,KAAK,CAAC,CAAC;QACvB2B,GAAG,CAAC1B,GAAG,GAAGwB,OAAO;QACjBE,GAAG,CAACC,GAAG,GAAGX,KAAK;QAEfZ,QAAQ,CAACwB,IAAI,CAACC,WAAW,CAACH,GAAG,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;IACJ;EAAC,CAAC,EAAE,EAAE,CAAC;EACL,oBACE/B,OAAA;IAAAmC,QAAA,eACInC,OAAA;MAAQoC,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV;AAACtC,EAAA,CAxCuBD,MAAM;AAAAwC,EAAA,GAANxC,MAAM;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}