{"ast":null,"code":"import { isKingAttacked } from \"./calculateMoves\";\nimport { pieceTypes } from \"./pieces\";\nconst isOccupied = (board, index) => board[index] !== 0;\nconst getColor = (board, index) => {\n  if (board[index] & pieceTypes.White) return pieceTypes.White;\n  if (board[index] & pieceTypes.Black) return pieceTypes.Black;else return 0;\n};\nconst getType = (board, index) => board[index] & 0b111;\nconst isSameColor = (board, from, to) => !(getColor(board, from) !== getColor(board, to));\nconst movePiece = (board, from, to) => {\n  const newBoard = [...board];\n  newBoard[to] = newBoard[from];\n  newBoard[from] = 0;\n  return newBoard;\n};\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\n  const board = fen.board;\n  const type = getType(board, from);\n  const isCheck = isKingAttacked(fen, to);\n  const isCapture = isOccupied(board, to);\n  const squares = \"abcdefgh\";\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\n  return `${pieces[type - 1].toUpperCase()}${isCapture && type == 1 ? squares[to % 8] : \"\"}${isCapture ? \"x\" : \"\"}${squares[to % 8]}${Math.floor(to / 8) + 1}${isCheck ? \"+\" : \"\"}`;\n};\nexport { isOccupied, getColor, getType, isSameColor, movePiece, moveToAlgebraicChessNotation };","map":{"version":3,"names":["isKingAttacked","pieceTypes","isOccupied","board","index","getColor","White","Black","getType","isSameColor","from","to","movePiece","newBoard","moveToAlgebraicChessNotation","fen","type","isCheck","isCapture","squares","pieces","toUpperCase","Math","floor"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/src/utils.js"],"sourcesContent":["import { isKingAttacked } from \"./calculateMoves\";\r\nimport { pieceTypes } from \"./pieces\";\r\n\r\nconst isOccupied = (board, index) => board[index] !== 0;\r\n\r\nconst getColor = (board, index) => {\r\n  if (board[index] & pieceTypes.White) return pieceTypes.White;\r\n  if (board[index] & pieceTypes.Black) return pieceTypes.Black;\r\n  else return 0;\r\n};\r\n\r\nconst getType = (board, index) => board[index] & 0b111;\r\n\r\nconst isSameColor = (board, from, to) =>\r\n  !(getColor(board, from) !== getColor(board, to));\r\n\r\nconst movePiece = (board, from, to) => {\r\n  const newBoard = [...board];\r\n  newBoard[to] = newBoard[from];\r\n  newBoard[from] = 0;\r\n  return newBoard;\r\n};\r\n\r\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\r\n  const board = fen.board;\r\n  const type = getType(board, from);\r\n  const isCheck = isKingAttacked(fen, to);\r\n  const isCapture = isOccupied(board, to);\r\n  const squares = \"abcdefgh\";\r\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\r\n  return `${pieces[type - 1].toUpperCase()}${isCapture && type==1 ? squares[to%8] : \"\"}${isCapture ? \"x\" : \"\"}${\r\n    squares[to % 8]\r\n  }${Math.floor(to / 8)+ 1}${isCheck ? \"+\" : \"\"}`;\r\n};\r\n\r\nexport {\r\n  isOccupied,\r\n  getColor,\r\n  getType,\r\n  isSameColor,\r\n  movePiece,\r\n  moveToAlgebraicChessNotation,\r\n};\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,UAAU,QAAQ,UAAU;AAErC,MAAMC,UAAU,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,CAACC,KAAK,CAAC,KAAK,CAAC;AAEvD,MAAMC,QAAQ,GAAGA,CAACF,KAAK,EAAEC,KAAK,KAAK;EACjC,IAAID,KAAK,CAACC,KAAK,CAAC,GAAGH,UAAU,CAACK,KAAK,EAAE,OAAOL,UAAU,CAACK,KAAK;EAC5D,IAAIH,KAAK,CAACC,KAAK,CAAC,GAAGH,UAAU,CAACM,KAAK,EAAE,OAAON,UAAU,CAACM,KAAK,CAAC,KACxD,OAAO,CAAC;AACf,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACL,KAAK,EAAEC,KAAK,KAAKD,KAAK,CAACC,KAAK,CAAC,GAAG,KAAK;AAEtD,MAAMK,WAAW,GAAGA,CAACN,KAAK,EAAEO,IAAI,EAAEC,EAAE,KAClC,EAAEN,QAAQ,CAACF,KAAK,EAAEO,IAAI,CAAC,KAAKL,QAAQ,CAACF,KAAK,EAAEQ,EAAE,CAAC,CAAC;AAElD,MAAMC,SAAS,GAAGA,CAACT,KAAK,EAAEO,IAAI,EAAEC,EAAE,KAAK;EACrC,MAAME,QAAQ,GAAG,CAAC,GAAGV,KAAK,CAAC;EAC3BU,QAAQ,CAACF,EAAE,CAAC,GAAGE,QAAQ,CAACH,IAAI,CAAC;EAC7BG,QAAQ,CAACH,IAAI,CAAC,GAAG,CAAC;EAClB,OAAOG,QAAQ;AACjB,CAAC;AAED,MAAMC,4BAA4B,GAAGA,CAACC,GAAG,EAAEL,IAAI,EAAEC,EAAE,KAAK;EACtD,MAAMR,KAAK,GAAGY,GAAG,CAACZ,KAAK;EACvB,MAAMa,IAAI,GAAGR,OAAO,CAACL,KAAK,EAAEO,IAAI,CAAC;EACjC,MAAMO,OAAO,GAAGjB,cAAc,CAACe,GAAG,EAAEJ,EAAE,CAAC;EACvC,MAAMO,SAAS,GAAGhB,UAAU,CAACC,KAAK,EAAEQ,EAAE,CAAC;EACvC,MAAMQ,OAAO,GAAG,UAAU;EAC1B,MAAMC,MAAM,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAC5C,OAAQ,GAAEA,MAAM,CAACJ,IAAI,GAAG,CAAC,CAAC,CAACK,WAAW,CAAC,CAAE,GAAEH,SAAS,IAAIF,IAAI,IAAE,CAAC,GAAGG,OAAO,CAACR,EAAE,GAAC,CAAC,CAAC,GAAG,EAAG,GAAEO,SAAS,GAAG,GAAG,GAAG,EAAG,GAC1GC,OAAO,CAACR,EAAE,GAAG,CAAC,CACf,GAAEW,IAAI,CAACC,KAAK,CAACZ,EAAE,GAAG,CAAC,CAAC,GAAE,CAAE,GAAEM,OAAO,GAAG,GAAG,GAAG,EAAG,EAAC;AACjD,CAAC;AAED,SACEf,UAAU,EACVG,QAAQ,EACRG,OAAO,EACPC,WAAW,EACXG,SAAS,EACTE,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}