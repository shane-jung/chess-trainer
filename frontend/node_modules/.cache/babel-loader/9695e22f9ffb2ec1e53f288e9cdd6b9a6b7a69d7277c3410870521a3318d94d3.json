{"ast":null,"code":"import calculateLegalMovesForPiece, { calculateLegalMoves, isKingAttacked } from \"./calculateMoves\";\nimport { pieceTypes, pieceValues } from \"./pieces\";\nconst isOccupied = (board, index) => board[index] !== 0;\nconst getColor = (board, index) => {\n  if (board[index] & pieceTypes.White) return pieceTypes.White;\n  if (board[index] & pieceTypes.Black) return pieceTypes.Black;else return 0;\n};\nconst getType = (board, index) => board[index] & 0b111;\nconst isSameColor = (board, from, to) => !(getColor(board, from) !== getColor(board, to));\nconst movePiece = (board, _ref) => {\n  let {\n    from,\n    to\n  } = _ref;\n  const newBoard = [...board];\n  newBoard[to] = newBoard[from];\n  newBoard[from] = 0;\n  return newBoard;\n};\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\n  const board = fen.board;\n  const type = getType(board, from);\n  const color = getColor(board, from);\n  const oppositeColor = color === pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\n  const isCheck = isKingAttacked({\n    ...fen,\n    board: movePiece(fen.board, {\n      from,\n      to\n    })\n  }, oppositeColor);\n  const isCapture = isOccupied(board, to);\n  const squares = \"abcdefgh\";\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\n  return `${pieces[type - 1].toUpperCase()}${isCapture && type === 1 ? squares[from % 8] : \"\"}${isCapture ? \"x\" : \"\"}${squares[to % 8]}${Math.floor(to / 8) + 1}${isCheck ? \"+\" : \"\"}`;\n};\nexport function parsePGN(pgn) {\n  console.log(pgn);\n  const regex = /\\d+\\./g;\n  const moves = pgn.split(regex).filter(move => move !== \"\");\n  const movesArray = moves.map(move => move.trim());\n  return movesArray;\n}\nfunction algebraicChessNotationToMoves(fen, moves) {\n  const movesArray = moves.split(\" \");\n}\nconst algebraicChessNotationToMove = (fen, notation) => {\n  if (notation === \"O-O\") return {\n    from: fen.turn === pieceTypes.White ? 4 : 60,\n    to: fen.turn === pieceTypes.White ? 6 : 62\n  };\n  if (notation === \"O-O-O\") return {\n    from: fen.turn === pieceTypes.White ? 4 : 60,\n    to: fen.turn === pieceTypes.White ? 2 : 58\n  };\n\n  //regex in short algebraic chess notation\n  const regex = /^([NBRQK]?)([a-h]?)([1-8]?)(x?)([a-h][1-8])(=[NBRQK]?)?(\\+|#)?$/;\n  const matches = notation.match(regex);\n  if (!matches) return null;\n  const [, type, file, rank, capture, to, promotion] = matches;\n  const turn = fen.turn === \"b\" ? pieceTypes.White : pieceTypes.Black;\n  const candidatePieces = fen.board.map((piece, index) => {\n    if (getType(fen.board, index) === pieceTypes.Pawn && getColor(fen.board, index) === turn) return index;\n    if (getType(fen.board, index) === pieceTypes[type] && getColor(fen.board, index) === turn) return index;\n    return null;\n  }).filter(index => index !== null);\n  const index = to.charCodeAt(0) - 97 + (8 - parseInt(to[1])) * 8;\n\n  //find piece that can move to the square\n  const piece = candidatePieces.find(from => {\n    const moves = calculateLegalMovesForPiece(fen, from);\n    return moves.includes(index);\n  });\n  return {\n    from: piece,\n    to: index\n  };\n};\nfunction checkGameOver(fen) {\n  if (fen.fullMoveNumber === 0) return false;\n  const board = fen.board;\n  const turn = fen.turn;\n  const color = turn === \"w\" ? 0b1000 : 0b10000;\n  const king = color | pieceTypes.King;\n  const kingIndex = board.indexOf(king);\n  const legalKingMoves = calculateLegalMovesForPiece(fen, kingIndex);\n  // console.log(legalMoves, isKingAttacked(fen, kingIndex));\n  return legalKingMoves.length === 0 && isKingAttacked(fen, color) && calculateLegalMoves(fen, color).length === 0;\n}\nfunction fenToString(fen) {\n  let file = 0;\n  const boardString = fen.board.map((piece, index) => {\n    if (piece === 0) return;\n    const type = piece & 0b111;\n    const color = piece & 0b1000;\n    const pieceString = [\"P\", \"N\", \"B\", \"R\", \"Q\", \"K\"][type - 1];\n    if (color === 0b1000) return pieceString.toLowerCase();\n    return pieceString;\n  });\n  return boardString.join(\"\");\n}\n\n// export function evaluatePosition(fen) {\n//   const { board } = fen;\n//   let score = 0;\n//   board.forEach((piece, index) => {\n//     if (piece === 0) return;\n//     const color = getColor(board, index);\n//     const pieceType = getType(piece);\n//     if (color === pieceTypes.White) {\n//       score += pieceValues[pieceType];\n//     } else {\n//       score -= pieceValues[pieceType];\n//     }\n//   });\n//   return score;\n// }\n\nexport { isOccupied, getColor, getType, isSameColor, movePiece, moveToAlgebraicChessNotation, algebraicChessNotationToMove, checkGameOver, fenToString };","map":{"version":3,"names":["calculateLegalMovesForPiece","calculateLegalMoves","isKingAttacked","pieceTypes","pieceValues","isOccupied","board","index","getColor","White","Black","getType","isSameColor","from","to","movePiece","_ref","newBoard","moveToAlgebraicChessNotation","fen","type","color","oppositeColor","isCheck","isCapture","squares","pieces","toUpperCase","Math","floor","parsePGN","pgn","console","log","regex","moves","split","filter","move","movesArray","map","trim","algebraicChessNotationToMoves","algebraicChessNotationToMove","notation","turn","matches","match","file","rank","capture","promotion","candidatePieces","piece","Pawn","charCodeAt","parseInt","find","includes","checkGameOver","fullMoveNumber","king","King","kingIndex","indexOf","legalKingMoves","length","fenToString","boardString","pieceString","toLowerCase","join"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/frontend/src/utils.js"],"sourcesContent":["import calculateLegalMovesForPiece, {\r\n  calculateLegalMoves,\r\n  isKingAttacked,\r\n} from \"./calculateMoves\";\r\nimport { pieceTypes, pieceValues } from \"./pieces\";\r\n\r\nconst isOccupied = (board, index) => board[index] !== 0;\r\n\r\nconst getColor = (board, index) => {\r\n  if (board[index] & pieceTypes.White) return pieceTypes.White;\r\n  if (board[index] & pieceTypes.Black) return pieceTypes.Black;\r\n  else return 0;\r\n};\r\n\r\nconst getType = (board, index) => board[index] & 0b111;\r\n\r\nconst isSameColor = (board, from, to) =>\r\n  !(getColor(board, from) !== getColor(board, to));\r\n\r\nconst movePiece = (board, { from, to }) => {\r\n  const newBoard = [...board];\r\n  newBoard[to] = newBoard[from];\r\n  newBoard[from] = 0;\r\n  return newBoard;\r\n};\r\n\r\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\r\n  const board = fen.board;\r\n  const type = getType(board, from);\r\n  const color = getColor(board, from);\r\n  const oppositeColor =\r\n    color === pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\r\n  const isCheck = isKingAttacked(\r\n    { ...fen, board: movePiece(fen.board, { from, to }) },\r\n    oppositeColor\r\n  );\r\n  const isCapture = isOccupied(board, to);\r\n  const squares = \"abcdefgh\";\r\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\r\n\r\n  return `${pieces[type - 1].toUpperCase()}${\r\n    isCapture && type === 1 ? squares[from % 8] : \"\"\r\n  }${isCapture ? \"x\" : \"\"}${squares[to % 8]}${Math.floor(to / 8) + 1}${\r\n    isCheck ? \"+\" : \"\"\r\n  }`;\r\n};\r\n\r\nexport function parsePGN(pgn) {\r\n  console.log(pgn);\r\n  const regex = /\\d+\\./g;\r\n  const moves = pgn.split(regex).filter((move) => move !== \"\");\r\n  const movesArray = moves.map((move) => move.trim());\r\n  return movesArray;\r\n}\r\n\r\nfunction algebraicChessNotationToMoves(fen, moves) {\r\n  const movesArray = moves.split(\" \");\r\n}\r\n\r\nconst algebraicChessNotationToMove = (fen, notation) => {\r\n  if (notation === \"O-O\")\r\n    return {\r\n      from: fen.turn === pieceTypes.White ? 4 : 60,\r\n      to: fen.turn === pieceTypes.White ? 6 : 62,\r\n    };\r\n  if (notation === \"O-O-O\")\r\n    return {\r\n      from: fen.turn === pieceTypes.White ? 4 : 60,\r\n      to: fen.turn === pieceTypes.White ? 2 : 58,\r\n    };\r\n\r\n  //regex in short algebraic chess notation\r\n  const regex =\r\n    /^([NBRQK]?)([a-h]?)([1-8]?)(x?)([a-h][1-8])(=[NBRQK]?)?(\\+|#)?$/;\r\n  const matches = notation.match(regex);\r\n  if (!matches) return null;\r\n  const [, type, file, rank, capture, to, promotion] = matches;\r\n  const turn = fen.turn === \"b\" ? pieceTypes.White : pieceTypes.Black;\r\n  const candidatePieces = fen.board\r\n    .map((piece, index) => {\r\n      if (\r\n        getType(fen.board, index) === pieceTypes.Pawn &&\r\n        getColor(fen.board, index) === turn\r\n      )\r\n        return index;\r\n      if (\r\n        getType(fen.board, index) === pieceTypes[type] &&\r\n        getColor(fen.board, index) === turn\r\n      )\r\n        return index;\r\n      return null;\r\n    })\r\n    .filter((index) => index !== null);\r\n  const index = to.charCodeAt(0) - 97 + (8 - parseInt(to[1])) * 8;\r\n\r\n  //find piece that can move to the square\r\n  const piece = candidatePieces.find((from) => {\r\n    const moves = calculateLegalMovesForPiece(fen, from);\r\n    return moves.includes(index);\r\n  });\r\n\r\n  return {\r\n    from: piece,\r\n    to: index,\r\n  };\r\n};\r\n\r\nfunction checkGameOver(fen) {\r\n  if (fen.fullMoveNumber === 0) return false;\r\n  const board = fen.board;\r\n  const turn = fen.turn;\r\n  const color = turn === \"w\" ? 0b1000 : 0b10000;\r\n  const king = color | pieceTypes.King;\r\n  const kingIndex = board.indexOf(king);\r\n  const legalKingMoves = calculateLegalMovesForPiece(fen, kingIndex);\r\n  // console.log(legalMoves, isKingAttacked(fen, kingIndex));\r\n  return (\r\n    legalKingMoves.length === 0 &&\r\n    isKingAttacked(fen, color) &&\r\n    calculateLegalMoves(fen, color).length === 0\r\n  );\r\n}\r\n\r\nfunction fenToString(fen) {\r\n  let file = 0;\r\n  const boardString = fen.board.map((piece, index) => {\r\n    if (piece === 0) return;\r\n    const type = piece & 0b111;\r\n    const color = piece & 0b1000;\r\n    const pieceString = [\"P\", \"N\", \"B\", \"R\", \"Q\", \"K\"][type - 1];\r\n    if (color === 0b1000) return pieceString.toLowerCase();\r\n    return pieceString;\r\n  });\r\n  return boardString.join(\"\");\r\n}\r\n\r\n// export function evaluatePosition(fen) {\r\n//   const { board } = fen;\r\n//   let score = 0;\r\n//   board.forEach((piece, index) => {\r\n//     if (piece === 0) return;\r\n//     const color = getColor(board, index);\r\n//     const pieceType = getType(piece);\r\n//     if (color === pieceTypes.White) {\r\n//       score += pieceValues[pieceType];\r\n//     } else {\r\n//       score -= pieceValues[pieceType];\r\n//     }\r\n//   });\r\n//   return score;\r\n// }\r\n\r\nexport {\r\n  isOccupied,\r\n  getColor,\r\n  getType,\r\n  isSameColor,\r\n  movePiece,\r\n  moveToAlgebraicChessNotation,\r\n  algebraicChessNotationToMove,\r\n  checkGameOver,\r\n  fenToString,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}