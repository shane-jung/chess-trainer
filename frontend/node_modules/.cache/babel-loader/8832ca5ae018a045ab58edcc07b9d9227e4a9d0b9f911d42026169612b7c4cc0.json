{"ast":null,"code":"import pieces, { pieceTypes } from \"./pieces\";\nexport const calculateLegalMoves = function (FEN, color) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const {\n    board\n  } = FEN;\n  const pieces = board.map((piece, index) => piece & color ? index : null).filter(piece => piece !== null);\n  const moves = pieces.map(index => {\n    return calculateLegalMovesForPiece(FEN, index, depth);\n  }).reduce((acc, val) => acc.concat(val), []);\n  return moves;\n};\nconst calculateLegalMovesForPiece = (FEN, index, depth) => {\n  let legalMoves;\n  const type = Object.keys(pieces).find(key => pieces[key] === FEN.board[index]);\n  console.log(FEN);\n  switch (type.toLowerCase()) {\n    case \"p\":\n      legalMoves = calculatePawnMoves(FEN, index);\n      break;\n    case \"r\":\n      legalMoves = calculateRookMoves(FEN, index);\n      break;\n    case \"n\":\n      legalMoves = calculateKnightMoves(FEN, index);\n      break;\n    case \"b\":\n      legalMoves = calculateBishopMoves(FEN, index);\n      break;\n    case \"q\":\n      legalMoves = calculateQueenMoves(FEN, index);\n      break;\n    case \"k\":\n      if (depth) return calculateCandidateKingMoves(FEN, index);else return calculateKingMoves(FEN, index);\n    default:\n      return [];\n  }\n  // return legalMoves;\n  if (depth) return legalMoves;\n  const {\n    board\n  } = FEN;\n  const color = board[index] & pieceTypes.White ? pieceTypes.White : pieceTypes.Black;\n  const kingIndex = board.indexOf(color | pieceTypes.King);\n  // console.log(\"FEN\", FEN);\n  return legalMoves.filter(move => {\n    return !isKingAttacked(movePiece(FEN, index, move), kingIndex, color);\n  });\n};\nfunction calculatePawnMoves(_ref, index) {\n  let {\n    board\n  } = _ref;\n  let rank = Math.floor(index / 8);\n  let file = index % 8;\n  const candidateMoves = [];\n  if (board[index] & pieceTypes.White) {\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\n    if (rank === 1 && !isOccupied(board, index + 16) && !isOccupied(board, index + 8)) candidateMoves.push(index + 16);\n    if (file > 0 && isOccupied(board, index + 7)) candidateMoves.push(index + 7);\n    if (file < 7 && isOccupied(board, index + 9)) candidateMoves.push(index + 9);\n  } else {\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\n    if (rank === 6 && !isOccupied(board, index - 16) && !isOccupied(board, index - 8)) candidateMoves.push(index - 16);\n    if (file > 0 && isOccupied(board, index - 9)) candidateMoves.push(index - 9);\n    if (file < 7 && isOccupied(board, index - 7)) candidateMoves.push(index - 7);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateRookMoves(_ref2, index) {\n  let {\n    board\n  } = _ref2;\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  for (let i = -1; i >= -file; i--) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = 1; i < 8 - file; i++) {\n    if (isOccupied(board, index + i)) {\n      candidateMoves.push(index + i);\n      break;\n    }\n    candidateMoves.push(index + i);\n  }\n  for (let i = -1; i >= -rank; i--) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  for (let i = 1; i < 8 - rank; i++) {\n    if (isOccupied(board, index + 8 * i)) {\n      candidateMoves.push(index + 8 * i);\n      break;\n    }\n    candidateMoves.push(index + 8 * i);\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateBishopMoves(_ref3, index) {\n  let {\n    board\n  } = _ref3;\n  console.log(board);\n  const candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  // console.log(rank, file);\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\n    //up and left\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\n    //down and right\n    candidateMoves.push(index + i + i * 8);\n    if (isOccupied(board, index + i + i * 8)) break;\n  }\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\n    //up and right\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  for (let i = 1; i < Math.min(file, 8 - rank); i++) {\n    //down and left\n    candidateMoves.push(index - i + i * 8);\n    if (isOccupied(board, index - i + i * 8)) break;\n  }\n  const legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  // console.log(legalMoves);\n  return legalMoves;\n}\nfunction calculateKnightMoves(_ref4, index) {\n  let {\n    board\n  } = _ref4;\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  if (file > 0) {\n    if (rank > 1) candidateMoves.push(index - 17);\n    if (rank < 6) candidateMoves.push(index + 15);\n  }\n  if (file > 1) {\n    if (rank > 0) candidateMoves.push(index - 10);\n    if (rank < 7) candidateMoves.push(index + 6);\n  }\n  if (file < 6) {\n    if (rank > 0) candidateMoves.push(index - 6);\n    if (rank < 7) candidateMoves.push(index + 10);\n  }\n  if (file < 7) {\n    if (rank > 1) candidateMoves.push(index - 15);\n    if (rank < 6) candidateMoves.push(index + 17);\n  }\n  let legalMoves = candidateMoves.filter(move => !isSameColor(board, index, move));\n  return legalMoves;\n}\nfunction calculateQueenMoves(_ref5, index) {\n  let {\n    board\n  } = _ref5;\n  // console.log(board);\n  console.log(board[index]);\n  return [...calculateBishopMoves({\n    board\n  }, index), ...calculateRookMoves({\n    board\n  }, index)];\n}\nfunction calculateCandidateKingMoves(_ref6, index) {\n  let {\n    board\n  } = _ref6;\n  let candidateMoves = [];\n  const rank = Math.floor(index / 8);\n  const file = index % 8;\n  if (file > 0) {\n    candidateMoves.push(index - 1);\n    if (rank > 0) candidateMoves.push(index - 9);\n    if (rank < 7) candidateMoves.push(index + 7);\n  }\n  if (file < 7) {\n    candidateMoves.push(index + 1);\n    if (rank > 0) candidateMoves.push(index - 7);\n    if (rank < 7) candidateMoves.push(index + 9);\n  }\n  if (rank > 0) candidateMoves.push(index - 8);\n  if (rank < 7) candidateMoves.push(index + 8);\n\n  // console.log(candidateMoves);\n  return candidateMoves.filter(move => !isSameColor(board, index, move));\n}\nexport function calculateKingMoves(_ref7, index) {\n  let {\n    board\n  } = _ref7;\n  const candidateMoves = calculateCandidateKingMoves(board, index);\n  const white = board[index] & pieceTypes.White;\n  const legalMoves = candidateMoves.filter(move => {\n    return !isKingAttacked(movePiece(board, index, move), move, white);\n  });\n  if (true && !isKingAttacked(board, index, white)) {\n    //if king and rook haven't moved yet.\n    if (white) {\n      if (legalMoves.includes(5) && !isKingAttacked(movePiece(board, index, 6), 6, white) && board[6] === 0) {\n        legalMoves.push(6);\n      }\n      if (legalMoves.includes(3) && board[2] === 0 && !isKingAttacked(movePiece(board, index, 2), 2, white) && board[1] === 0) {\n        legalMoves.push(2);\n      }\n    } else {\n      if (legalMoves.includes(61) && !isKingAttacked(movePiece(board, index, 62), 62, white) && board[62] === 0) {\n        legalMoves.push(62);\n      }\n      if (legalMoves.includes(59) && board[58] === 0 && !isKingAttacked(movePiece(board, index, 58), 58, white) && board[57] === 0) {\n        legalMoves.push(58);\n      }\n    }\n  }\n  return legalMoves;\n}\nexport default calculateLegalMovesForPiece;\n\n// // UTILS\n\nfunction isOccupied(board, index) {\n  return board[index] !== 0;\n}\nfunction getColor(board, index) {\n  if (board[index] & pieceTypes.White) return pieceTypes.White;\n  if (board[index] & pieceTypes.Black) return pieceTypes.Black;else return 0;\n}\nfunction getType(board, index) {\n  return board[index] & 0b111;\n}\nfunction isSameColor(board, from, to) {\n  // console.log(board, board[from], board[to]);\n  // console.log(getColor(board, from), getColor(board, to));\n  return !(getColor(board, from) !== getColor(board, to));\n}\nfunction movePiece(FEN, index, move) {\n  const newBoard = [...FEN.board];\n  newBoard[move] = newBoard[index];\n  newBoard[index] = 0;\n  return {\n    ...FEN,\n    board: newBoard\n  };\n}\nfunction isKingAttacked(FEN, index, color) {\n  const opponentColor = color & pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\n  const opponentMoves = calculateLegalMoves(FEN, opponentColor, 1);\n  return opponentMoves.includes(index);\n}","map":{"version":3,"names":["pieces","pieceTypes","calculateLegalMoves","FEN","color","depth","arguments","length","undefined","board","map","piece","index","filter","moves","calculateLegalMovesForPiece","reduce","acc","val","concat","legalMoves","type","Object","keys","find","key","console","log","toLowerCase","calculatePawnMoves","calculateRookMoves","calculateKnightMoves","calculateBishopMoves","calculateQueenMoves","calculateCandidateKingMoves","calculateKingMoves","White","Black","kingIndex","indexOf","King","move","isKingAttacked","movePiece","_ref","rank","Math","floor","file","candidateMoves","isOccupied","push","isSameColor","_ref2","i","_ref3","min","_ref4","_ref5","_ref6","_ref7","white","includes","getColor","getType","from","to","newBoard","opponentColor","opponentMoves"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/src/calculateMoves.js"],"sourcesContent":["import pieces, { pieceTypes } from \"./pieces\";\r\n\r\nexport const calculateLegalMoves = (FEN, color, depth = 0) => {\r\n  const { board } = FEN;\r\n\r\n  const pieces = board\r\n    .map((piece, index) => (piece & color ? index : null))\r\n    .filter((piece) => piece !== null);\r\n  const moves = pieces\r\n    .map((index) => {\r\n      return calculateLegalMovesForPiece(FEN, index, depth);\r\n    })\r\n    .reduce((acc, val) => acc.concat(val), []);\r\n\r\n  return moves;\r\n};\r\n\r\nconst calculateLegalMovesForPiece = (FEN, index, depth) => {\r\n  let legalMoves;\r\n  const type = Object.keys(pieces).find(\r\n    (key) => pieces[key] === FEN.board[index]\r\n  );\r\n    console.log(FEN);\r\n  switch (type.toLowerCase()) {\r\n    case \"p\":\r\n      legalMoves = calculatePawnMoves(FEN, index);\r\n      break;\r\n    case \"r\":\r\n      legalMoves = calculateRookMoves(FEN, index);\r\n      break;\r\n    case \"n\":\r\n      legalMoves = calculateKnightMoves(FEN, index);\r\n      break;\r\n    case \"b\":\r\n      legalMoves = calculateBishopMoves(FEN, index);\r\n      break;\r\n    case \"q\":\r\n      legalMoves = calculateQueenMoves(FEN, index);\r\n      break;\r\n    case \"k\":\r\n      if (depth) return calculateCandidateKingMoves(FEN, index);\r\n      else return calculateKingMoves(FEN, index);\r\n    default:\r\n      return [];\r\n  }\r\n  // return legalMoves;\r\n  if (depth) return legalMoves;\r\n\r\n  const { board } = FEN;\r\n  const color =\r\n    board[index] & pieceTypes.White ? pieceTypes.White : pieceTypes.Black;\r\n  const kingIndex = board.indexOf(color | pieceTypes.King);\r\n  // console.log(\"FEN\", FEN);\r\n  return legalMoves.filter((move) => {\r\n    return !isKingAttacked(movePiece(FEN, index, move), kingIndex, color);\r\n  });\r\n};\r\n\r\nfunction calculatePawnMoves({ board }, index) {\r\n  let rank = Math.floor(index / 8);\r\n  let file = index % 8;\r\n  const candidateMoves = [];\r\n  if (board[index] & pieceTypes.White) {\r\n    if (!isOccupied(board, index + 8)) candidateMoves.push(index + 8);\r\n    if (\r\n      rank === 1 &&\r\n      !isOccupied(board, index + 16) &&\r\n      !isOccupied(board, index + 8)\r\n    )\r\n      candidateMoves.push(index + 16);\r\n    if (file > 0 && isOccupied(board, index + 7))\r\n      candidateMoves.push(index + 7);\r\n    if (file < 7 && isOccupied(board, index + 9))\r\n      candidateMoves.push(index + 9);\r\n  } else {\r\n    if (!isOccupied(board, index - 8)) candidateMoves.push(index - 8);\r\n    if (\r\n      rank === 6 &&\r\n      !isOccupied(board, index - 16) &&\r\n      !isOccupied(board, index - 8)\r\n    )\r\n      candidateMoves.push(index - 16);\r\n    if (file > 0 && isOccupied(board, index - 9))\r\n      candidateMoves.push(index - 9);\r\n    if (file < 7 && isOccupied(board, index - 7))\r\n      candidateMoves.push(index - 7);\r\n  }\r\n\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateRookMoves({ board }, index) {\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  for (let i = -1; i >= -file; i--) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = 1; i < 8 - file; i++) {\r\n    if (isOccupied(board, index + i)) {\r\n      candidateMoves.push(index + i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + i);\r\n  }\r\n  for (let i = -1; i >= -rank; i--) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  for (let i = 1; i < 8 - rank; i++) {\r\n    if (isOccupied(board, index + 8 * i)) {\r\n      candidateMoves.push(index + 8 * i);\r\n      break;\r\n    }\r\n    candidateMoves.push(index + 8 * i);\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateBishopMoves({ board }, index) {\r\n   console.log(board);\r\n  const candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  // console.log(rank, file);\r\n  for (let i = -1; i >= -Math.min(file, rank); i--) {\r\n    //up and left\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < Math.min(8 - rank, 8 - file); i++) {\r\n    //down and right\r\n    candidateMoves.push(index + i + i * 8);\r\n    if (isOccupied(board, index + i + i * 8)) break;\r\n  }\r\n  for (let i = -1; i >= 1 - Math.min(8 - file, 1 + rank); i--) {\r\n    //up and right\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  for (let i = 1; i < Math.min(file, 8 - rank); i++) {\r\n    //down and left\r\n    candidateMoves.push(index - i + i * 8);\r\n    if (isOccupied(board, index - i + i * 8)) break;\r\n  }\r\n  const legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  // console.log(legalMoves);\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateKnightMoves({ board }, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  if (file > 0) {\r\n    if (rank > 1) candidateMoves.push(index - 17);\r\n    if (rank < 6) candidateMoves.push(index + 15);\r\n  }\r\n  if (file > 1) {\r\n    if (rank > 0) candidateMoves.push(index - 10);\r\n    if (rank < 7) candidateMoves.push(index + 6);\r\n  }\r\n  if (file < 6) {\r\n    if (rank > 0) candidateMoves.push(index - 6);\r\n    if (rank < 7) candidateMoves.push(index + 10);\r\n  }\r\n  if (file < 7) {\r\n    if (rank > 1) candidateMoves.push(index - 15);\r\n    if (rank < 6) candidateMoves.push(index + 17);\r\n  }\r\n  let legalMoves = candidateMoves.filter(\r\n    (move) => !isSameColor(board, index, move)\r\n  );\r\n  return legalMoves;\r\n}\r\n\r\nfunction calculateQueenMoves({ board }, index) {\r\n  // console.log(board);\r\n  console.log(board[index]);\r\n  return [\r\n    ...calculateBishopMoves({ board }, index),\r\n    ...calculateRookMoves({ board }, index),\r\n  ];\r\n}\r\n\r\nfunction calculateCandidateKingMoves({ board }, index) {\r\n  let candidateMoves = [];\r\n  const rank = Math.floor(index / 8);\r\n  const file = index % 8;\r\n  if (file > 0) {\r\n    candidateMoves.push(index - 1);\r\n    if (rank > 0) candidateMoves.push(index - 9);\r\n    if (rank < 7) candidateMoves.push(index + 7);\r\n  }\r\n  if (file < 7) {\r\n    candidateMoves.push(index + 1);\r\n    if (rank > 0) candidateMoves.push(index - 7);\r\n    if (rank < 7) candidateMoves.push(index + 9);\r\n  }\r\n  if (rank > 0) candidateMoves.push(index - 8);\r\n  if (rank < 7) candidateMoves.push(index + 8);\r\n\r\n  // console.log(candidateMoves);\r\n  return candidateMoves.filter((move) => !isSameColor(board, index, move));\r\n}\r\n\r\nexport function calculateKingMoves({ board }, index) {\r\n  const candidateMoves = calculateCandidateKingMoves(board, index);\r\n  const white = board[index] & pieceTypes.White;\r\n  const legalMoves = candidateMoves.filter((move) => {\r\n    return !isKingAttacked(movePiece(board, index, move), move, white);\r\n  });\r\n  if (true && !isKingAttacked(board, index, white)) {\r\n    //if king and rook haven't moved yet.\r\n    if (white) {\r\n      if (\r\n        legalMoves.includes(5) &&\r\n        !isKingAttacked(movePiece(board, index, 6), 6, white) &&\r\n        board[6] === 0\r\n      ) {\r\n        legalMoves.push(6);\r\n      }\r\n      if (\r\n        legalMoves.includes(3) &&\r\n        board[2] === 0 &&\r\n        !isKingAttacked(movePiece(board, index, 2), 2, white) &&\r\n        board[1] === 0\r\n      ) {\r\n        legalMoves.push(2);\r\n      }\r\n    } else {\r\n      if (\r\n        legalMoves.includes(61) &&\r\n        !isKingAttacked(movePiece(board, index, 62), 62, white) &&\r\n        board[62] === 0\r\n      ) {\r\n        legalMoves.push(62);\r\n      }\r\n      if (\r\n        legalMoves.includes(59) &&\r\n        board[58] === 0 &&\r\n        !isKingAttacked(movePiece(board, index, 58), 58, white) &&\r\n        board[57] === 0\r\n      ) {\r\n        legalMoves.push(58);\r\n      }\r\n    }\r\n  }\r\n  return legalMoves;\r\n}\r\n\r\nexport default calculateLegalMovesForPiece;\r\n\r\n// // UTILS\r\n\r\nfunction isOccupied(board, index) {\r\n  return board[index] !== 0;\r\n}\r\n\r\nfunction getColor(board, index) {\r\n  if (board[index] & pieceTypes.White) return pieceTypes.White;\r\n  if (board[index] & pieceTypes.Black) return pieceTypes.Black;\r\n  else return 0;\r\n}\r\n\r\nfunction getType(board, index) {\r\n  return board[index] & 0b111;\r\n}\r\n\r\nfunction isSameColor(board, from, to) {\r\n  // console.log(board, board[from], board[to]);\r\n  // console.log(getColor(board, from), getColor(board, to));\r\n  return !(getColor(board, from) !== getColor(board, to));\r\n}\r\n\r\nfunction movePiece(FEN, index, move) {\r\n  const newBoard = [...FEN.board];\r\n  newBoard[move] = newBoard[index];\r\n  newBoard[index] = 0;\r\n  return { ...FEN, board: newBoard };\r\n}\r\n\r\nfunction isKingAttacked(FEN, index, color) {\r\n  const opponentColor =\r\n    color & pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\r\n  const opponentMoves = calculateLegalMoves(FEN, opponentColor, 1);\r\n  return opponentMoves.includes(index);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}