{"ast":null,"code":"import calculateLegalMovesForPiece, { calculateLegalMoves, isKingAttacked } from \"./calculateMoves\";\nimport { pieceTypes, pieceValues } from \"./pieces\";\nconst isOccupied = (board, index) => board[index] !== 0;\nconst getPieceColor = piece => {\n  if (piece & pieceTypes.White) return pieceTypes.White;\n  if (piece & pieceTypes.Black) return pieceTypes.Black;else return 0;\n};\nconst getPieceType = piece => piece & 0b111;\nconst isSameColor = (piece1, piece2) => !(getPieceColor(piece1) !== getPieceColor(piece2));\nconst movePiece = (board, _ref) => {\n  let {\n    from,\n    to\n  } = _ref;\n  const newBoard = [...board];\n  newBoard[to] = newBoard[from];\n  newBoard[from] = 0;\n  if (getPieceType(newBoard[to]) === pieceTypes.King) {\n    if (to === from + 2) {\n      newBoard[from + 1] = newBoard[from + 3];\n      newBoard[from + 3] = 0;\n    }\n    if (to === from - 2) {\n      newBoard[from - 1] = newBoard[from - 4];\n      newBoard[from - 4] = 0;\n    }\n  }\n  if (getPieceType(newBoard[to]) === pieceTypes.Pawn && (to < 8 || to > 55)) {\n    newBoard[to] = pieceTypes.Queen | getPieceColor(newBoard[to]);\n  }\n  return newBoard;\n};\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\n  const board = fen.board;\n  const type = getPieceType(board[from]);\n  const color = getPieceColor(board[from]);\n  const oppositeColor = color === pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\n  const isCheck = isKingAttacked({\n    ...fen,\n    board: movePiece(fen.board, {\n      from,\n      to\n    })\n  }, oppositeColor);\n  const isCapture = isOccupied(board, to);\n  const squares = \"abcdefgh\";\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\n  return `${pieces[type - 1].toUpperCase()}${isCapture && type === 1 ? squares[from % 8] : \"\"}${isCapture ? \"x\" : \"\"}${squares[to % 8]}${Math.floor(to / 8) + 1}${isCheck ? \"+\" : \"\"}`;\n};\nexport function parsePGN(pgn) {\n  const i = pgn.lastIndexOf(\"]\");\n  const header = pgn.slice(0, i + 1);\n  const movesString = pgn.slice(i + 1);\n  const regex = /\\d+\\.\\s|\\s/g;\n  const movesList = movesString.split(regex).filter(move => move !== \"\");\n  return movesList;\n}\nconst algebraicChessNotationToMove = (fen, notation) => {\n  if (notation === \"O-O\") return {\n    from: fen.turn === pieceTypes.White ? 4 : 60,\n    to: fen.turn === pieceTypes.White ? 6 : 62\n  };\n  if (notation === \"O-O-O\") return {\n    from: fen.turn === pieceTypes.White ? 4 : 60,\n    to: fen.turn === pieceTypes.White ? 2 : 58\n  };\n  const regex = /^([NBRQK]?)([a-h]?)([1-8]?)(x?)([a-h][1-8])(=[NBRQK]?)?(\\+|#)?$/;\n  const matches = notation.match(regex);\n  if (!matches) return null;\n  const [, type, file, rank, capture, to, promotion] = matches;\n  const pieceChars = [\"\", \"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\n  const turn = fen.turn === \"b\" ? pieceTypes.White : pieceTypes.Black;\n  const candidatePieces = fen.board.map((piece, index) => {\n    if (getPieceType(fen.board[index]) === pieceTypes.Pawn && getPieceColor(fen.board[index]) === turn) return index;\n    if (getPieceType(fen.board[index]) === pieceChars.indexOf(type) && getPieceColor(fen.board[index]) === turn) return index;\n    return null;\n  }).filter(index => index !== null);\n  console.log(candidatePieces);\n  const index = to.charCodeAt(0) - 97 + (parseInt(to[1]) - 1) * 8;\n  const narrowed = candidatePieces.filter(from => {\n    const type2 = getPieceType(fen.board[from]);\n    return [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"][type2 - 1] === type;\n  });\n  const piece = narrowed.find(from => {\n    const moves = calculateLegalMovesForPiece(fen, from);\n    return moves.includes(index);\n  });\n  // console.log(piece);\n  return {\n    from: piece,\n    to: index\n  };\n};\nfunction checkGameOver(fen) {\n  if (fen.fullMoveNumber === 0) return false;\n  const board = fen.board;\n  const turn = fen.turn;\n  const color = turn === \"w\" ? 0b1000 : 0b10000;\n  const king = color | pieceTypes.King;\n  const kingIndex = board.indexOf(king);\n  const legalKingMoves = calculateLegalMovesForPiece(fen, kingIndex);\n  // console.log(legalMoves, isKingAttacked(fen, kingIndex));\n  return legalKingMoves.length === 0 && isKingAttacked(fen, color) && calculateLegalMoves(fen, color).length === 0;\n}\nfunction fenToString(fen) {\n  let file = 0;\n  const boardString = fen.board.map((piece, index) => {\n    if (piece === 0) return \"\";\n    const type = piece & 0b111;\n    const color = piece & 0b1000;\n    const pieceString = [\"P\", \"N\", \"B\", \"R\", \"Q\", \"K\"][type - 1];\n    if (color === 0b1000) return pieceString.toLowerCase();\n    return pieceString;\n  });\n  return boardString.join(\"\");\n}\n\n// export function evaluatePosition(fen) {\n//   const { board } = fen;\n//   let score = 0;\n//   board.forEach((piece, index) => {\n//     if (piece === 0) return;\n//     const color = getPieceColor(board, index);\n//     const pieceType = getPieceType(piece);\n//     if (color === pieceTypes.White) {\n//       score += pieceValues[pieceType];\n//     } else {\n//       score -= pieceValues[pieceType];\n//     }\n//   });\n//   return score;\n// }\n\nexport { isOccupied, getPieceColor, getPieceType, isSameColor, movePiece, moveToAlgebraicChessNotation, algebraicChessNotationToMove, checkGameOver, fenToString };","map":{"version":3,"names":["calculateLegalMovesForPiece","calculateLegalMoves","isKingAttacked","pieceTypes","pieceValues","isOccupied","board","index","getPieceColor","piece","White","Black","getPieceType","isSameColor","piece1","piece2","movePiece","_ref","from","to","newBoard","King","Pawn","Queen","moveToAlgebraicChessNotation","fen","type","color","oppositeColor","isCheck","isCapture","squares","pieces","toUpperCase","Math","floor","parsePGN","pgn","i","lastIndexOf","header","slice","movesString","regex","movesList","split","filter","move","algebraicChessNotationToMove","notation","turn","matches","match","file","rank","capture","promotion","pieceChars","candidatePieces","map","indexOf","console","log","charCodeAt","parseInt","narrowed","type2","find","moves","includes","checkGameOver","fullMoveNumber","king","kingIndex","legalKingMoves","length","fenToString","boardString","pieceString","toLowerCase","join"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/frontend/src/utils.js"],"sourcesContent":["import calculateLegalMovesForPiece, {\r\n  calculateLegalMoves,\r\n  isKingAttacked,\r\n} from \"./calculateMoves\";\r\nimport { pieceTypes, pieceValues } from \"./pieces\";\r\n\r\nconst isOccupied = (board, index) => board[index] !== 0;\r\n\r\nconst getPieceColor = (piece) => {\r\n  if (piece & pieceTypes.White) return pieceTypes.White;\r\n  if (piece & pieceTypes.Black) return pieceTypes.Black;\r\n  else return 0;\r\n};\r\n\r\nconst getPieceType = (piece) => piece & 0b111;\r\n\r\nconst isSameColor = (piece1, piece2) =>\r\n  !(getPieceColor(piece1) !== getPieceColor(piece2));\r\n\r\nconst movePiece = (board, { from, to }) => {\r\n  const newBoard = [...board];\r\n  newBoard[to] = newBoard[from];\r\n  newBoard[from] = 0;\r\n\r\n  if (getPieceType(newBoard[to]) === pieceTypes.King) {\r\n    if (to === from + 2) {\r\n      newBoard[from + 1] = newBoard[from + 3];\r\n      newBoard[from + 3] = 0;\r\n    }\r\n    if (to === from - 2) {\r\n      newBoard[from - 1] = newBoard[from - 4];\r\n      newBoard[from - 4] = 0;\r\n    }\r\n  }\r\n  if (getPieceType(newBoard[to]) === pieceTypes.Pawn && (to < 8 || to > 55)) {\r\n    newBoard[to] = pieceTypes.Queen | getPieceColor(newBoard[to]);\r\n  }\r\n\r\n  return newBoard;\r\n};\r\n\r\nconst moveToAlgebraicChessNotation = (fen, from, to) => {\r\n  const board = fen.board;\r\n  const type = getPieceType(board[from]);\r\n  const color = getPieceColor(board[from]);\r\n  const oppositeColor =\r\n    color === pieceTypes.White ? pieceTypes.Black : pieceTypes.White;\r\n  const isCheck = isKingAttacked(\r\n    { ...fen, board: movePiece(fen.board, { from, to }) },\r\n    oppositeColor\r\n  );\r\n  const isCapture = isOccupied(board, to);\r\n  const squares = \"abcdefgh\";\r\n  const pieces = [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\r\n\r\n  return `${pieces[type - 1].toUpperCase()}${\r\n    isCapture && type === 1 ? squares[from % 8] : \"\"\r\n  }${isCapture ? \"x\" : \"\"}${squares[to % 8]}${Math.floor(to / 8) + 1}${\r\n    isCheck ? \"+\" : \"\"\r\n  }`;\r\n};\r\n\r\nexport function parsePGN(pgn) {\r\n  const i = pgn.lastIndexOf(\"]\");\r\n  const header = pgn.slice(0, i + 1);\r\n  const movesString = pgn.slice(i + 1);\r\n\r\n  const regex = /\\d+\\.\\s|\\s/g;\r\n  const movesList = movesString.split(regex).filter((move) => move !== \"\");\r\n  return movesList;\r\n}\r\n\r\nconst algebraicChessNotationToMove = (fen, notation) => {\r\n  if (notation === \"O-O\")\r\n    return {\r\n      from: fen.turn === pieceTypes.White ? 4 : 60,\r\n      to: fen.turn === pieceTypes.White ? 6 : 62,\r\n    };\r\n  if (notation === \"O-O-O\")\r\n    return {\r\n      from: fen.turn === pieceTypes.White ? 4 : 60,\r\n      to: fen.turn === pieceTypes.White ? 2 : 58,\r\n    };\r\n  const regex =\r\n    /^([NBRQK]?)([a-h]?)([1-8]?)(x?)([a-h][1-8])(=[NBRQK]?)?(\\+|#)?$/;\r\n  const matches = notation.match(regex);\r\n  if (!matches) return null;\r\n  const [, type, file, rank, capture, to, promotion] = matches;\r\n  const pieceChars = [\"\", \"\", \"N\", \"B\", \"R\", \"Q\", \"K\"];\r\n  const turn = fen.turn === \"b\" ? pieceTypes.White : pieceTypes.Black;\r\n  const candidatePieces = fen.board\r\n    .map((piece, index) => {\r\n      if (\r\n        getPieceType(fen.board[index]) === pieceTypes.Pawn &&\r\n        getPieceColor(fen.board[index]) === turn\r\n      )\r\n        return index;\r\n      if (\r\n        getPieceType(fen.board[index]) === pieceChars.indexOf(type) &&\r\n        getPieceColor(fen.board[index]) === turn\r\n      )\r\n        return index;\r\n      return null;\r\n    })\r\n    .filter((index) => index !== null);\r\n  console.log(candidatePieces);\r\n  const index = to.charCodeAt(0) - 97 + (parseInt(to[1]) - 1) * 8;\r\n  const narrowed = candidatePieces.filter((from) => {\r\n    const type2 = getPieceType(fen.board[from]);\r\n\r\n    return [\"\", \"N\", \"B\", \"R\", \"Q\", \"K\"][type2 - 1] === type;\r\n  });\r\n  const piece = narrowed.find((from) => {\r\n    const moves = calculateLegalMovesForPiece(fen, from);\r\n    return moves.includes(index);\r\n  });\r\n  // console.log(piece);\r\n  return {\r\n    from: piece,\r\n    to: index,\r\n  };\r\n};\r\n\r\nfunction checkGameOver(fen) {\r\n  if (fen.fullMoveNumber === 0) return false;\r\n  const board = fen.board;\r\n  const turn = fen.turn;\r\n  const color = turn === \"w\" ? 0b1000 : 0b10000;\r\n  const king = color | pieceTypes.King;\r\n  const kingIndex = board.indexOf(king);\r\n  const legalKingMoves = calculateLegalMovesForPiece(fen, kingIndex);\r\n  // console.log(legalMoves, isKingAttacked(fen, kingIndex));\r\n  return (\r\n    legalKingMoves.length === 0 &&\r\n    isKingAttacked(fen, color) &&\r\n    calculateLegalMoves(fen, color).length === 0\r\n  );\r\n}\r\n\r\nfunction fenToString(fen) {\r\n  let file = 0;\r\n  const boardString = fen.board.map((piece, index) => {\r\n    if (piece === 0) return \"\";\r\n    const type = piece & 0b111;\r\n    const color = piece & 0b1000;\r\n    const pieceString = [\"P\", \"N\", \"B\", \"R\", \"Q\", \"K\"][type - 1];\r\n    if (color === 0b1000) return pieceString.toLowerCase();\r\n    return pieceString;\r\n  });\r\n  return boardString.join(\"\");\r\n}\r\n\r\n// export function evaluatePosition(fen) {\r\n//   const { board } = fen;\r\n//   let score = 0;\r\n//   board.forEach((piece, index) => {\r\n//     if (piece === 0) return;\r\n//     const color = getPieceColor(board, index);\r\n//     const pieceType = getPieceType(piece);\r\n//     if (color === pieceTypes.White) {\r\n//       score += pieceValues[pieceType];\r\n//     } else {\r\n//       score -= pieceValues[pieceType];\r\n//     }\r\n//   });\r\n//   return score;\r\n// }\r\n\r\nexport {\r\n  isOccupied,\r\n  getPieceColor,\r\n  getPieceType,\r\n  isSameColor,\r\n  movePiece,\r\n  moveToAlgebraicChessNotation,\r\n  algebraicChessNotationToMove,\r\n  checkGameOver,\r\n  fenToString,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}