{"ast":null,"code":"import { createSlice, current } from \"@reduxjs/toolkit\";\nimport { algebraicChessNotationToMove, fenToString, getPieceColor, getPieceType, movePiece, moveToAlgebraicChessNotation } from \"../utils\";\nimport { pieceTypes } from \"../pieces\";\nconst gameReducer = createSlice({\n  name: \"game\",\n  initialState: {\n    turn: \"w\",\n    board: Array(64).fill(0),\n    selected: null,\n    legalMoves: [],\n    history: [],\n    moveNumber: 0,\n    stringFEN: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n    FEN: {\n      board: Array(64).fill(0),\n      turn: \"w\",\n      castling: \"KQkq\",\n      enPassant: -1,\n      halfMoveClock: 0,\n      fullMoveNumber: 0\n    },\n    activePiece: null\n  },\n  reducers: {\n    setBoard: (state, action) => {\n      state.FEN = action.payload;\n    },\n    rotateTurn: (state, action) => {\n      state.turn = state.turn === \"w\" ? \"b\" : \"w\";\n    },\n    setTurn: (state, action) => {\n      state.turn = action.payload;\n    },\n    setSelected: (state, action) => {\n      state.selected = action.payload;\n    },\n    setActivePiece: (state, action) => {\n      state.activePiece = action.payload;\n    },\n    setLegalMoves: (state, action) => {\n      state.legalMoves = action.payload;\n    },\n    setFen: (state, action) => {\n      state.FEN = action.payload;\n    },\n    recordMove: (state, action) => {\n      // console.log(capturedPiece);\n      state.moveNumber = state.history.length + 1;\n      state.history.push(action.payload);\n    },\n    setMoveNumber: (state, action) => {\n      const newMoveNumber = Math.max(0, Math.min(action.payload + state.moveNumber, state.history.length));\n      const diff = newMoveNumber - state.moveNumber;\n      for (let i = 0; i < Math.abs(diff); i += 1) {\n        const {\n          move,\n          notation,\n          capturedPiece\n        } = state.history[state.moveNumber + (diff < 0 ? -i - 1 : i)];\n        if (diff < 0) {\n          state.FEN.board = movePiece(current(state.FEN.board), {\n            from: move.to,\n            to: move.from\n          });\n          if (capturedPiece) {\n            state.FEN.board[move.to] = capturedPiece;\n          }\n        } else state.FEN.board = movePiece(current(state.FEN.board), {\n          from: move.from,\n          to: move.to\n        });\n      }\n      state.moveNumber = newMoveNumber;\n    },\n    handleMove: (state, action) => {\n      const {\n        from,\n        to\n      } = action.payload;\n      let {\n        board,\n        enPassant,\n        turn,\n        castling,\n        halfMoveClock,\n        fullMoveNumber\n      } = state.FEN;\n      const type = getPieceType(board[from]);\n      const color = getPieceColor(board[from]);\n      const capturedPiece = board[to];\n      halfMoveClock += 1;\n\n      //board\n      board = movePiece(board, {\n        from,\n        to\n      });\n\n      // castling\n      let toRemove = [];\n      if (type === pieceTypes.King) {\n        if (color === pieceTypes.White) toRemove += \"KQ\";else toRemove += \"kq\";\n        if (to === from + 2) board = movePiece(board, {\n          from: from + 3,\n          to: from + 1\n        });else if (to === from - 2) board = movePiece(board, {\n          from: from - 4,\n          to: from - 1\n        });\n      } else if (type === pieceTypes.Rook) {\n        if (color === pieceTypes.White) {\n          if (from === 7) toRemove += \"K\";else if (from === 0) toRemove += \"Q\";\n        } else {\n          if (from === 63) toRemove += \"k\";else if (from === 56) toRemove += \"q\";\n        }\n      } else if (type === pieceTypes.Pawn) {\n        halfMoveClock = 0;\n        if (color === pieceTypes.White) {\n          if (to - from === 16) enPassant = to - 8;else if (to - from === -16) enPassant = to + 8;\n          if (enPassant === to) board[to - 8] = 0;\n        } else {\n          if (to - from === 16) enPassant = to - 8;else if (to - from === -16) enPassant = to + 8;\n          if (enPassant === to) board[to + 8] = 0;\n        }\n      }\n      castling = castling.replace(new RegExp(`[${toRemove}]`, \"g\"), \"\");\n      const notation = moveToAlgebraicChessNotation(state.FEN, from, to);\n      fullMoveNumber = turn === \"w\" ? fullMoveNumber + 1 : fullMoveNumber;\n      state.moveNumber += 1;\n      state.history.push({\n        move: {\n          from,\n          to\n        },\n        notation,\n        capturedPiece\n      });\n      turn = turn === \"w\" ? \"b\" : \"w\";\n      state.FEN = {\n        board,\n        turn,\n        castling,\n        enPassant,\n        halfMoveClock,\n        fullMoveNumber\n      };\n    },\n    loadGame: (state, action) => {\n      const moves = action.payload;\n      let fen = state.FEN;\n      let board = fen.board;\n      moves.forEach((move, index) => {\n        board = movePiece(board, move);\n        console.log(board);\n        // console.log(algebraicChessNotationToMove({...fen, board}, move));\n        // if(index) return;\n      });\n    }\n  }\n});\n\nexport const selectBoard = state => state.game.board;\nexport const selectTurn = state => state.game.turn;\nexport const selectSelected = state => state.game.selected;\nexport const selectLegalMoves = state => state.game.legalMoves;\nexport const selectHistory = state => state.game.history;\nexport const selectMoveNumber = state => state.game.moveNumber;\nexport const selectStringFEN = state => state.game.stringFEN;\nexport const selectFen = state => state.game.FEN;\nexport const selectActivePiece = state => state.game.activePiece;\nexport const {\n  setBoard,\n  setTurn,\n  setSelected,\n  setLegalMoves,\n  recordMove,\n  rotateTurn,\n  setMoveNumber,\n  handleMove,\n  loadGame\n} = gameReducer.actions;\nexport default gameReducer.reducer;","map":{"version":3,"names":["createSlice","current","algebraicChessNotationToMove","fenToString","getPieceColor","getPieceType","movePiece","moveToAlgebraicChessNotation","pieceTypes","gameReducer","name","initialState","turn","board","Array","fill","selected","legalMoves","history","moveNumber","stringFEN","FEN","castling","enPassant","halfMoveClock","fullMoveNumber","activePiece","reducers","setBoard","state","action","payload","rotateTurn","setTurn","setSelected","setActivePiece","setLegalMoves","setFen","recordMove","length","push","setMoveNumber","newMoveNumber","Math","max","min","diff","i","abs","move","notation","capturedPiece","from","to","handleMove","type","color","toRemove","King","White","Rook","Pawn","replace","RegExp","loadGame","moves","fen","forEach","index","console","log","selectBoard","game","selectTurn","selectSelected","selectLegalMoves","selectHistory","selectMoveNumber","selectStringFEN","selectFen","selectActivePiece","actions","reducer"],"sources":["C:/Users/shane/Documents/Projects/chess-trainer/frontend/src/slices/game.js"],"sourcesContent":["import { createSlice, current } from \"@reduxjs/toolkit\";\r\n\r\nimport {\r\n  algebraicChessNotationToMove,\r\n  fenToString,\r\n  getPieceColor,\r\n  getPieceType,\r\n  movePiece,\r\n  moveToAlgebraicChessNotation,\r\n} from \"../utils\";\r\nimport { pieceTypes } from \"../pieces\";\r\n\r\nconst gameReducer = createSlice({\r\n  name: \"game\",\r\n  initialState: {\r\n    turn: \"w\",\r\n    board: Array(64).fill(0),\r\n    selected: null,\r\n    legalMoves: [],\r\n    history: [],\r\n    moveNumber: 0,\r\n    stringFEN: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\r\n    FEN: {\r\n      board: Array(64).fill(0),\r\n      turn: \"w\",\r\n      castling: \"KQkq\",\r\n      enPassant: -1,\r\n      halfMoveClock: 0,\r\n      fullMoveNumber: 0,\r\n    },\r\n    activePiece: null,\r\n  },\r\n  reducers: {\r\n    setBoard: (state, action) => {\r\n      state.FEN = action.payload;\r\n    },\r\n    rotateTurn: (state, action) => {\r\n      state.turn = state.turn === \"w\" ? \"b\" : \"w\";\r\n    },\r\n    setTurn: (state, action) => {\r\n      state.turn = action.payload;\r\n    },\r\n    setSelected: (state, action) => {\r\n      state.selected = action.payload;\r\n    },\r\n    setActivePiece: (state, action) => {\r\n      state.activePiece = action.payload;\r\n    },\r\n    setLegalMoves: (state, action) => {\r\n      state.legalMoves = action.payload;\r\n    },\r\n\r\n    setFen: (state, action) => {\r\n      state.FEN = action.payload;\r\n    },\r\n\r\n    recordMove: (state, action) => {\r\n      // console.log(capturedPiece);\r\n      state.moveNumber = state.history.length + 1;\r\n      state.history.push(action.payload);\r\n    },\r\n\r\n    setMoveNumber: (state, action) => {\r\n      const newMoveNumber = Math.max(\r\n        0,\r\n        Math.min(action.payload + state.moveNumber, state.history.length)\r\n      );\r\n      const diff = newMoveNumber - state.moveNumber;\r\n      for (let i = 0; i < Math.abs(diff); i += 1) {\r\n        const { move, notation, capturedPiece } =\r\n          state.history[state.moveNumber + (diff < 0 ? -i - 1 : i)];\r\n        if (diff < 0) {\r\n          state.FEN.board = movePiece(current(state.FEN.board), {\r\n            from: move.to,\r\n            to: move.from,\r\n          });\r\n          if (capturedPiece) {\r\n            state.FEN.board[move.to] = capturedPiece;\r\n          }\r\n        } else\r\n          state.FEN.board = movePiece(current(state.FEN.board), {\r\n            from: move.from,\r\n            to: move.to,\r\n          });\r\n      }\r\n\r\n      state.moveNumber = newMoveNumber;\r\n    },\r\n\r\n    handleMove: (state, action) => {\r\n      const { from, to } = action.payload;\r\n      let { board, enPassant, turn, castling, halfMoveClock, fullMoveNumber } =\r\n        state.FEN;\r\n\r\n      const type = getPieceType(board[from]);\r\n      const color = getPieceColor(board[from]);\r\n      const capturedPiece = board[to];\r\n\r\n      halfMoveClock += 1;\r\n\r\n      //board\r\n      board = movePiece(board, { from, to });\r\n\r\n      // castling\r\n      let toRemove = [];\r\n      if (type === pieceTypes.King) {\r\n        if (color === pieceTypes.White) toRemove += \"KQ\";\r\n        else toRemove += \"kq\";\r\n        if (to === from + 2)\r\n          board = movePiece(board, { from: from + 3, to: from + 1 });\r\n        else if (to === from - 2)\r\n          board = movePiece(board, { from: from - 4, to: from - 1 });\r\n      } else if (type === pieceTypes.Rook) {\r\n        if (color === pieceTypes.White) {\r\n          if (from === 7) toRemove += \"K\";\r\n          else if (from === 0) toRemove += \"Q\";\r\n        } else {\r\n          if (from === 63) toRemove += \"k\";\r\n          else if (from === 56) toRemove += \"q\";\r\n        }\r\n      } else if (type === pieceTypes.Pawn) {\r\n        halfMoveClock = 0;\r\n        if (color === pieceTypes.White) {\r\n          if (to - from === 16) enPassant = to - 8;\r\n          else if (to - from === -16) enPassant = to + 8;\r\n          if (enPassant === to) board[to - 8] = 0;\r\n        } else {\r\n          if (to - from === 16) enPassant = to - 8;\r\n          else if (to - from === -16) enPassant = to + 8;\r\n          if (enPassant === to) board[to + 8] = 0;\r\n        }\r\n      }\r\n\r\n      castling = castling.replace(new RegExp(`[${toRemove}]`, \"g\"), \"\");\r\n      const notation = moveToAlgebraicChessNotation(state.FEN, from, to);\r\n      fullMoveNumber = turn === \"w\" ? fullMoveNumber + 1 : fullMoveNumber;\r\n      state.moveNumber +=1;\r\n      state.history.push({ move: { from, to }, notation, capturedPiece });\r\n      turn = turn === \"w\" ? \"b\" : \"w\";\r\n      state.FEN = {\r\n        board,\r\n        turn,\r\n        castling,\r\n        enPassant,\r\n        halfMoveClock,\r\n        fullMoveNumber,\r\n      };\r\n    },\r\n    loadGame: (state, action) => {\r\n      const moves = action.payload;\r\n      let fen = state.FEN;\r\n      let board = fen.board;\r\n      moves.forEach((move, index) =>{\r\n        board = movePiece(board, move)\r\n        console.log(board);\r\n        // console.log(algebraicChessNotationToMove({...fen, board}, move));\r\n        // if(index) return;\r\n      })\r\n\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectBoard = (state) => state.game.board;\r\nexport const selectTurn = (state) => state.game.turn;\r\nexport const selectSelected = (state) => state.game.selected;\r\nexport const selectLegalMoves = (state) => state.game.legalMoves;\r\nexport const selectHistory = (state) => state.game.history;\r\nexport const selectMoveNumber = (state) => state.game.moveNumber;\r\nexport const selectStringFEN = (state) => state.game.stringFEN;\r\nexport const selectFen = (state) => state.game.FEN;\r\nexport const selectActivePiece = (state) => state.game.activePiece;\r\n\r\nexport const {\r\n  setBoard,\r\n  setTurn,\r\n  setSelected,\r\n  setLegalMoves,\r\n  recordMove,\r\n  rotateTurn,\r\n  setMoveNumber,\r\n  handleMove,\r\n  loadGame\r\n} = gameReducer.actions;\r\n\r\nexport default gameReducer.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}